{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
    },
    "contracts/interfaces/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.17;\n\n// Minimal ERC20 interface.\ninterface IERC20 {\n    function transfer(address to, uint256 amount) external returns (bool);\n}\n"
    },
    "contracts/interfaces/ILayerZeroEndpoint.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.5.0;\n\nimport \"./ILayerZeroUserApplicationConfig.sol\";\n\ninterface ILayerZeroEndpoint is ILayerZeroUserApplicationConfig {\n    // @notice send a LayerZero message to the specified address at a LayerZero endpoint.\n    // @param _dstChainId - the destination chain identifier\n    // @param _destination - the address on destination chain (in bytes). address length/format may vary by chains\n    // @param _payload - a custom bytes payload to send to the destination contract\n    // @param _refundAddress - if the source transaction is cheaper than the amount of value passed, refund the additional amount to this address\n    // @param _zroPaymentAddress - the address of the ZRO token holder who would pay for the transaction\n    // @param _adapterParams - parameters for custom functionality. e.g. receive airdropped native gas from the relayer on destination\n    function send(uint16 _dstChainId, bytes calldata _destination, bytes calldata _payload, address payable _refundAddress, address _zroPaymentAddress, bytes calldata _adapterParams) external payable;\n\n    // @notice used by the messaging library to publish verified payload\n    // @param _srcChainId - the source chain identifier\n    // @param _srcAddress - the source contract (as bytes) at the source chain\n    // @param _dstAddress - the address on destination chain\n    // @param _nonce - the unbound message ordering nonce\n    // @param _gasLimit - the gas limit for external contract execution\n    // @param _payload - verified payload to send to the destination contract\n    function receivePayload(uint16 _srcChainId, bytes calldata _srcAddress, address _dstAddress, uint64 _nonce, uint _gasLimit, bytes calldata _payload) external;\n\n    // @notice get the inboundNonce of a lzApp from a source chain which could be EVM or non-EVM chain\n    // @param _srcChainId - the source chain identifier\n    // @param _srcAddress - the source chain contract address\n    function getInboundNonce(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (uint64);\n\n    // @notice get the outboundNonce from this source chain which, consequently, is always an EVM\n    // @param _srcAddress - the source chain contract address\n    function getOutboundNonce(uint16 _dstChainId, address _srcAddress) external view returns (uint64);\n\n    // @notice gets a quote in source native gas, for the amount that send() requires to pay for message delivery\n    // @param _dstChainId - the destination chain identifier\n    // @param _userApplication - the user app address on this EVM chain\n    // @param _payload - the custom message to send over LayerZero\n    // @param _payInZRO - if false, user app pays the protocol fee in native token\n    // @param _adapterParam - parameters for the adapter service, e.g. send some dust native token to dstChain\n    function estimateFees(uint16 _dstChainId, address _userApplication, bytes calldata _payload, bool _payInZRO, bytes calldata _adapterParam) external view returns (uint nativeFee, uint zroFee);\n\n    // @notice get this Endpoint's immutable source identifier\n    function getChainId() external view returns (uint16);\n\n    // @notice the interface to retry failed message on this Endpoint destination\n    // @param _srcChainId - the source chain identifier\n    // @param _srcAddress - the source chain contract address\n    // @param _payload - the payload to be retried\n    function retryPayload(uint16 _srcChainId, bytes calldata _srcAddress, bytes calldata _payload) external;\n\n    // @notice query if any STORED payload (message blocking) at the endpoint.\n    // @param _srcChainId - the source chain identifier\n    // @param _srcAddress - the source chain contract address\n    function hasStoredPayload(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (bool);\n\n    // @notice query if the _libraryAddress is valid for sending msgs.\n    // @param _userApplication - the user app address on this EVM chain\n    function getSendLibraryAddress(address _userApplication) external view returns (address);\n\n    // @notice query if the _libraryAddress is valid for receiving msgs.\n    // @param _userApplication - the user app address on this EVM chain\n    function getReceiveLibraryAddress(address _userApplication) external view returns (address);\n\n    // @notice query if the non-reentrancy guard for send() is on\n    // @return true if the guard is on. false otherwise\n    function isSendingPayload() external view returns (bool);\n\n    // @notice query if the non-reentrancy guard for receive() is on\n    // @return true if the guard is on. false otherwise\n    function isReceivingPayload() external view returns (bool);\n\n    // @notice get the configuration of the LayerZero messaging library of the specified version\n    // @param _version - messaging library version\n    // @param _chainId - the chainId for the pending config change\n    // @param _userApplication - the contract address of the user application\n    // @param _configType - type of configuration. every messaging library has its own convention.\n    function getConfig(uint16 _version, uint16 _chainId, address _userApplication, uint _configType) external view returns (bytes memory);\n\n    // @notice get the send() LayerZero messaging library version\n    // @param _userApplication - the contract address of the user application\n    function getSendVersion(address _userApplication) external view returns (uint16);\n\n    // @notice get the lzReceive() LayerZero messaging library version\n    // @param _userApplication - the contract address of the user application\n    function getReceiveVersion(address _userApplication) external view returns (uint16);\n}\n"
    },
    "contracts/interfaces/ILayerZeroReceiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.5.0;\n\ninterface ILayerZeroReceiver {\n    // @notice LayerZero endpoint will invoke this function to deliver the message on the destination\n    // @param _srcChainId - the source endpoint identifier\n    // @param _srcAddress - the source sending contract address from the source chain\n    // @param _nonce - the ordered message nonce\n    // @param _payload - the signed payload is the UA bytes has encoded to be sent\n    function lzReceive(uint16 _srcChainId, bytes calldata _srcAddress, uint64 _nonce, bytes calldata _payload) external;\n}\n"
    },
    "contracts/interfaces/ILayerZeroUserApplicationConfig.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.5.0;\n\ninterface ILayerZeroUserApplicationConfig {\n    // @notice set the configuration of the LayerZero messaging library of the specified version\n    // @param _version - messaging library version\n    // @param _chainId - the chainId for the pending config change\n    // @param _configType - type of configuration. every messaging library has its own convention.\n    // @param _config - configuration in the bytes. can encode arbitrary content.\n    function setConfig(uint16 _version, uint16 _chainId, uint _configType, bytes calldata _config) external;\n\n    // @notice set the send() LayerZero messaging library version to _version\n    // @param _version - new messaging library version\n    function setSendVersion(uint16 _version) external;\n\n    // @notice set the lzReceive() LayerZero messaging library version to _version\n    // @param _version - new messaging library version\n    function setReceiveVersion(uint16 _version) external;\n\n    // @notice Only when the UA needs to resume the message flow in blocking mode and clear the stored payload\n    // @param _srcChainId - the chainId of the source chain\n    // @param _srcAddress - the contract address of the source contract at the source chain\n    function forceResumeReceive(uint16 _srcChainId, bytes calldata _srcAddress) external;\n}\n"
    },
    "contracts/interfaces/ILiquidityAggregator.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.17;\n\ninterface ILiquidityAggregator {\n    struct Payload {\n        uint amount;\n        uint permitNonce;\n        uint deadline;\n        bytes signature;\n    }\n\n    function aggregate(\n        uint16[] calldata _dstChainIds,\n        uint[] calldata _amounts,\n        uint[] calldata _permitNonces,\n        uint[] calldata _deadlines,\n        bytes[] calldata signatures\n    ) external payable;\n}\n"
    },
    "contracts/interfaces/IPermit2.sol": {
      "content": "// Minimal Permit2 interface, derived from\n// https://github.com/Uniswap/permit2/blob/main/src/interfaces/ISignatureTransfer.sol\npragma solidity ^0.8.17;\n\nimport {IERC20} from \"./IERC20.sol\";\n\ninterface IPermit2 {\n    // Token and amount in a permit message.\n    struct TokenPermissions {\n        // Token to transfer.\n        IERC20 token;\n        // Amount to transfer.\n        uint256 amount;\n    }\n\n    // The permit2 message.\n    struct PermitTransferFrom {\n        // Permitted token and amount.\n        TokenPermissions permitted;\n        // Unique identifier for this permit.\n        uint256 nonce;\n        // Expiration for this permit.\n        uint256 deadline;\n    }\n\n    // Transfer details for permitTransferFrom().\n    struct SignatureTransferDetails {\n        // Recipient of tokens.\n        address to;\n        // Amount to transfer.\n        uint256 requestedAmount;\n    }\n\n    // Consume a permit2 message and transfer tokens.\n    function permitTransferFrom(\n        PermitTransferFrom calldata permit,\n        SignatureTransferDetails calldata transferDetails,\n        address owner,\n        bytes calldata signature\n    ) external;\n}\n"
    },
    "contracts/interfaces/IStargateFeeLibrary.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\npragma abicoder v2;\nimport \"../mocks/StargatePoolMock.sol\";\n\ninterface IStargateFeeLibrary {\n    function getFees(\n        uint _srcPoolId,\n        uint _dstPoolId,\n        uint16 _dstChainId,\n        address _from,\n        uint _amountSD\n    ) external returns (StargatePoolMock.SwapObj memory s);\n\n    function getVersion() external view returns (string memory);\n}\n"
    },
    "contracts/interfaces/IStargateReceiver.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\ninterface IStargateReceiver {\n    function sgReceive(\n        uint16 _chainId,\n        bytes memory _srcAddress,\n        uint _nonce,\n        address _token,\n        uint amountLD,\n        bytes memory payload\n    ) external;\n}\n"
    },
    "contracts/interfaces/IStargateRouter.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\npragma abicoder v2;\n\ninterface IStargateRouter {\n    struct lzTxObj {\n        uint256 dstGasForCall;\n        uint256 dstNativeAmount;\n        bytes dstNativeAddr;\n    }\n\n    function swap(\n        uint16 _dstChainId,\n        uint256 _srcPoolId,\n        uint256 _dstPoolId,\n        address payable _refundAddress,\n        uint256 _amountLD,\n        uint256 _minAmountLD,\n        lzTxObj memory _lzTxParams,\n        bytes calldata _to,\n        bytes calldata _payload\n    ) external payable;\n}\n"
    },
    "contracts/libs/LzLib.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity >=0.6.0;\npragma experimental ABIEncoderV2;\n\nlibrary LzLib {\n    // LayerZero communication\n    struct CallParams {\n        address payable refundAddress;\n        address zroPaymentAddress;\n    }\n\n    //---------------------------------------------------------------------------\n    // Address type handling\n\n    struct AirdropParams {\n        uint airdropAmount;\n        bytes32 airdropAddress;\n    }\n\n    function buildAdapterParams(LzLib.AirdropParams memory _airdropParams, uint _uaGasLimit) internal pure returns (bytes memory adapterParams) {\n        if (_airdropParams.airdropAmount == 0 && _airdropParams.airdropAddress == bytes32(0x0)) {\n            adapterParams = buildDefaultAdapterParams(_uaGasLimit);\n        } else {\n            adapterParams = buildAirdropAdapterParams(_uaGasLimit, _airdropParams);\n        }\n    }\n\n    // Build Adapter Params\n    function buildDefaultAdapterParams(uint _uaGas) internal pure returns (bytes memory) {\n        // txType 1\n        // bytes  [2       32      ]\n        // fields [txType  extraGas]\n        return abi.encodePacked(uint16(1), _uaGas);\n    }\n\n    function buildAirdropAdapterParams(uint _uaGas, AirdropParams memory _params) internal pure returns (bytes memory) {\n        require(_params.airdropAmount > 0, \"Airdrop amount must be greater than 0\");\n        require(_params.airdropAddress != bytes32(0x0), \"Airdrop address must be set\");\n\n        // txType 2\n        // bytes  [2       32        32            bytes[]         ]\n        // fields [txType  extraGas  dstNativeAmt  dstNativeAddress]\n        return abi.encodePacked(uint16(2), _uaGas, _params.airdropAmount, _params.airdropAddress);\n    }\n\n    function getGasLimit(bytes memory _adapterParams) internal pure returns (uint gasLimit) {\n        require(_adapterParams.length == 34 || _adapterParams.length > 66, \"Invalid adapterParams\");\n        assembly {\n            gasLimit := mload(add(_adapterParams, 34))\n        }\n    }\n\n    // Decode Adapter Params\n    function decodeAdapterParams(bytes memory _adapterParams) internal pure returns (uint16 txType, uint uaGas, uint airdropAmount, address payable airdropAddress) {\n        require(_adapterParams.length == 34 || _adapterParams.length > 66, \"Invalid adapterParams\");\n        assembly {\n            txType := mload(add(_adapterParams, 2))\n            uaGas := mload(add(_adapterParams, 34))\n        }\n        require(txType == 1 || txType == 2, \"Unsupported txType\");\n        require(uaGas > 0, \"Gas too low\");\n\n        if (txType == 2) {\n            assembly {\n                airdropAmount := mload(add(_adapterParams, 66))\n                airdropAddress := mload(add(_adapterParams, 86))\n            }\n        }\n    }\n\n    //---------------------------------------------------------------------------\n    // Address type handling\n    // TODO: testing\n    function bytes32ToAddress(bytes32 _bytes32Address) internal pure returns (address _address) {\n        require(bytes12(_bytes32Address) == bytes12(0), \"Invalid address\"); // first 12 bytes should be empty\n        return address(uint160(uint(_bytes32Address)));\n    }\n\n    function addressToBytes32(address _address) internal pure returns (bytes32 _bytes32Address) {\n        return bytes32(uint(uint160(_address)));\n    }\n}\n"
    },
    "contracts/LiquidityAggregator.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.17;\n\nimport \"./NonblockingLzApp.sol\";\nimport \"./interfaces/IERC20.sol\";\nimport \"./interfaces/ILiquidityAggregator.sol\";\nimport \"./interfaces/IPermit2.sol\";\nimport \"./interfaces/IStargateRouter.sol\";\n\ncontract LiquidityAggregator is NonblockingLzApp, ILiquidityAggregator {\n    // TODO: Hardcoded for now. Make this generic for different kinds of tokens\n    IERC20 public immutable TOKEN;\n    IStargateRouter public immutable STARGATE_ROUTER;\n    // Permit2 is deployed at the same address on all chains\n    address public constant PERMIT2_ADDRESS = 0x000000000022D473030F116dDEE9F6B43aC78BA3;\n    uint public constant POOL_ID = 1;\n\n    constructor(\n        address _lzEndpoint,\n        IERC20 _token,\n        IStargateRouter _stargateRouter\n    ) NonblockingLzApp(_lzEndpoint) {\n        TOKEN = _token;\n        STARGATE_ROUTER = _stargateRouter;\n    }\n\n    function aggregate(\n        uint16[] calldata _dstChainIds,\n        uint[] calldata _amounts,\n        uint[] calldata _permitNonces,\n        uint[] calldata _deadlines,\n        bytes[] calldata signatures\n    ) external payable override {\n        uint length = _dstChainIds.length;\n        // check if the array length of all parameters are the same\n        require(length == _amounts.length && length == _permitNonces.length && length == _deadlines.length && length == signatures.length, \"Length mismatch\");\n\n        // loop through destination chains\n        for (uint i = 0; i < length; ) {\n            // encode the payload with above params\n            bytes memory payload = abi.encode(Payload(_amounts[i], _permitNonces[i], _deadlines[i], signatures[i]));\n\n            // send payload to destination chain\n            _lzSend(_dstChainIds[i], payload, payable(msg.sender), address(0x0), bytes(\"\"), msg.value);\n\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    function _nonblockingLzReceive(\n        uint16 _srcChainId,\n        bytes memory _srcAddress,\n        uint64, // nonce for L0\n        bytes memory _payload\n    ) internal override {\n        // decode payload\n        Payload memory payload = abi.decode(_payload, (Payload));\n\n        if (payload.amount > 0) {\n            // use assembly to extract the address from the bytes memory parameter\n            address _owner;\n            assembly {\n                _owner := mload(add(_srcAddress, 20))\n            }\n\n            // TODO: Improve readability\n            IPermit2(PERMIT2_ADDRESS).permitTransferFrom(IPermit2.PermitTransferFrom(IPermit2.TokenPermissions(TOKEN, payload.amount), payload.permitNonce, payload.deadline), IPermit2.SignatureTransferDetails(address(STARGATE_ROUTER), payload.amount), _owner, payload.signature);\n\n            // call stargate swap\n            _executeStargateSwap(_srcChainId, _srcAddress, payload.amount, _owner);\n        }\n    }\n\n    function _executeStargateSwap(\n        uint16 _srcChainId,\n        bytes memory _srcAddress,\n        uint _amount,\n        address _owner\n    ) private {\n        STARGATE_ROUTER.swap{value: msg.value}( // TODO: check if we need msg.value\n            _srcChainId,\n            POOL_ID,\n            POOL_ID,\n            payable(_owner),\n            _amount,\n            _amount, // TODO: Setting min amount the same as amonut.  Should include a min amount in message.\n            IStargateRouter.lzTxObj(0, 0, \"0x\"), // TODO: Check if this is generic.\n            _srcAddress,\n            bytes(\"\")\n        );\n    }\n}\n"
    },
    "contracts/LzApp.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"./interfaces/ILayerZeroReceiver.sol\";\nimport \"./interfaces/ILayerZeroUserApplicationConfig.sol\";\nimport \"./interfaces/ILayerZeroEndpoint.sol\";\nimport \"./utils/BytesLib.sol\";\n\n/*\n * a generic LzReceiver implementation\n */\nabstract contract LzApp is\n    Ownable,\n    ILayerZeroReceiver,\n    ILayerZeroUserApplicationConfig\n{\n    using BytesLib for bytes;\n\n    ILayerZeroEndpoint public immutable lzEndpoint;\n    mapping(uint16 => bytes) public trustedRemoteLookup;\n    mapping(uint16 => mapping(uint16 => uint256)) public minDstGasLookup;\n    address public precrime;\n\n    event SetPrecrime(address precrime);\n    event SetTrustedRemote(uint16 _remoteChainId, bytes _path);\n    event SetTrustedRemoteAddress(uint16 _remoteChainId, bytes _remoteAddress);\n    event SetMinDstGas(uint16 _dstChainId, uint16 _type, uint256 _minDstGas);\n\n    constructor(address _endpoint) {\n        lzEndpoint = ILayerZeroEndpoint(_endpoint);\n    }\n\n    function lzReceive(\n        uint16 _srcChainId,\n        bytes calldata _srcAddress,\n        uint64 _nonce,\n        bytes calldata _payload\n    ) public virtual override {\n        // lzReceive must be called by the endpoint for security\n        require(\n            _msgSender() == address(lzEndpoint),\n            \"LzApp: invalid endpoint caller\"\n        );\n\n        bytes memory trustedRemote = trustedRemoteLookup[_srcChainId];\n        // if will still block the message pathway from (srcChainId, srcAddress). should not receive message from untrusted remote.\n        require(\n            _srcAddress.length == trustedRemote.length &&\n                trustedRemote.length > 0 &&\n                keccak256(_srcAddress) == keccak256(trustedRemote),\n            \"LzApp: invalid source sending contract\"\n        );\n\n        _blockingLzReceive(_srcChainId, _srcAddress, _nonce, _payload);\n    }\n\n    // abstract function - the default behaviour of LayerZero is blocking. See: NonblockingLzApp if you dont need to enforce ordered messaging\n    function _blockingLzReceive(\n        uint16 _srcChainId,\n        bytes memory _srcAddress,\n        uint64 _nonce,\n        bytes memory _payload\n    ) internal virtual;\n\n    function _lzSend(\n        uint16 _dstChainId,\n        bytes memory _payload,\n        address payable _refundAddress,\n        address _zroPaymentAddress,\n        bytes memory _adapterParams,\n        uint256 _nativeFee\n    ) internal virtual {\n        bytes memory trustedRemote = trustedRemoteLookup[_dstChainId];\n        require(\n            trustedRemote.length != 0,\n            \"LzApp: destination chain is not a trusted source\"\n        );\n        lzEndpoint.send{value: _nativeFee}(\n            _dstChainId,\n            trustedRemote,\n            _payload,\n            _refundAddress,\n            _zroPaymentAddress,\n            _adapterParams\n        );\n    }\n\n    function _checkGasLimit(\n        uint16 _dstChainId,\n        uint16 _type,\n        bytes memory _adapterParams,\n        uint256 _extraGas\n    ) internal view virtual {\n        uint256 providedGasLimit = _getGasLimit(_adapterParams);\n        uint256 minGasLimit = minDstGasLookup[_dstChainId][_type] + _extraGas;\n        require(minGasLimit > 0, \"LzApp: minGasLimit not set\");\n        require(providedGasLimit >= minGasLimit, \"LzApp: gas limit is too low\");\n    }\n\n    function _getGasLimit(bytes memory _adapterParams)\n        internal\n        pure\n        virtual\n        returns (uint256 gasLimit)\n    {\n        require(_adapterParams.length >= 34, \"LzApp: invalid adapterParams\");\n        assembly {\n            gasLimit := mload(add(_adapterParams, 34))\n        }\n    }\n\n    //---------------------------UserApplication config----------------------------------------\n    function getConfig(\n        uint16 _version,\n        uint16 _chainId,\n        address,\n        uint256 _configType\n    ) external view returns (bytes memory) {\n        return\n            lzEndpoint.getConfig(\n                _version,\n                _chainId,\n                address(this),\n                _configType\n            );\n    }\n\n    // generic config for LayerZero user Application\n    function setConfig(\n        uint16 _version,\n        uint16 _chainId,\n        uint256 _configType,\n        bytes calldata _config\n    ) external override onlyOwner {\n        lzEndpoint.setConfig(_version, _chainId, _configType, _config);\n    }\n\n    function setSendVersion(uint16 _version) external override onlyOwner {\n        lzEndpoint.setSendVersion(_version);\n    }\n\n    function setReceiveVersion(uint16 _version) external override onlyOwner {\n        lzEndpoint.setReceiveVersion(_version);\n    }\n\n    function forceResumeReceive(uint16 _srcChainId, bytes calldata _srcAddress)\n        external\n        override\n        onlyOwner\n    {\n        lzEndpoint.forceResumeReceive(_srcChainId, _srcAddress);\n    }\n\n    // _path = abi.encodePacked(remoteAddress, localAddress)\n    // this function set the trusted path for the cross-chain communication\n    function setTrustedRemote(uint16 _srcChainId, bytes calldata _path)\n        external\n        onlyOwner\n    {\n        trustedRemoteLookup[_srcChainId] = _path;\n        emit SetTrustedRemote(_srcChainId, _path);\n    }\n\n    function setTrustedRemoteAddress(\n        uint16 _remoteChainId,\n        bytes calldata _remoteAddress\n    ) external onlyOwner {\n        trustedRemoteLookup[_remoteChainId] = abi.encodePacked(\n            _remoteAddress,\n            address(this)\n        );\n        emit SetTrustedRemoteAddress(_remoteChainId, _remoteAddress);\n    }\n\n    function getTrustedRemoteAddress(uint16 _remoteChainId)\n        external\n        view\n        returns (bytes memory)\n    {\n        bytes memory path = trustedRemoteLookup[_remoteChainId];\n        require(path.length != 0, \"LzApp: no trusted path record\");\n        return path.slice(0, path.length - 20); // the last 20 bytes should be address(this)\n    }\n\n    function setPrecrime(address _precrime) external onlyOwner {\n        precrime = _precrime;\n        emit SetPrecrime(_precrime);\n    }\n\n    function setMinDstGas(\n        uint16 _dstChainId,\n        uint16 _packetType,\n        uint256 _minGas\n    ) external onlyOwner {\n        require(_minGas > 0, \"LzApp: invalid minGas\");\n        minDstGasLookup[_dstChainId][_packetType] = _minGas;\n        emit SetMinDstGas(_dstChainId, _packetType, _minGas);\n    }\n\n    //--------------------------- VIEW FUNCTION ----------------------------------------\n    function isTrustedRemote(uint16 _srcChainId, bytes calldata _srcAddress)\n        external\n        view\n        returns (bool)\n    {\n        bytes memory trustedSource = trustedRemoteLookup[_srcChainId];\n        return keccak256(trustedSource) == keccak256(_srcAddress);\n    }\n}\n"
    },
    "contracts/mocks/LPTokenERC20Mock.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\n// libraries\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\n\ncontract LPTokenERC20Mock {\n    using SafeMath for uint;\n\n    //---------------------------------------------------------------------------\n    // CONSTANTS\n    string public name;\n    string public symbol;\n    bytes32 public constant PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\n    // set in constructor\n    bytes32 public DOMAIN_SEPARATOR;\n\n    //---------------------------------------------------------------------------\n    // VARIABLES\n    uint public decimals;\n    uint public totalSupply;\n    mapping(address => uint) public balanceOf;\n    mapping(address => mapping(address => uint)) public allowance;\n    mapping(address => uint) public nonces;\n\n    //---------------------------------------------------------------------------\n    // EVENTS\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    constructor(string memory _name, string memory _symbol) {\n        name = _name;\n        symbol = _symbol;\n        uint chainId;\n        assembly {\n            chainId := chainid()\n        }\n        DOMAIN_SEPARATOR = keccak256(abi.encode(keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"), keccak256(bytes(name)), keccak256(bytes(\"1\")), chainId, address(this)));\n    }\n\n    function _mint(address to, uint value) internal {\n        totalSupply = totalSupply.add(value);\n        balanceOf[to] = balanceOf[to].add(value);\n        emit Transfer(address(0), to, value);\n    }\n\n    function _burn(address from, uint value) internal {\n        balanceOf[from] = balanceOf[from].sub(value);\n        totalSupply = totalSupply.sub(value);\n        emit Transfer(from, address(0), value);\n    }\n\n    function _approve(\n        address owner,\n        address spender,\n        uint value\n    ) private {\n        allowance[owner][spender] = value;\n        emit Approval(owner, spender, value);\n    }\n\n    function _transfer(\n        address from,\n        address to,\n        uint value\n    ) private {\n        balanceOf[from] = balanceOf[from].sub(value);\n        balanceOf[to] = balanceOf[to].add(value);\n        emit Transfer(from, to, value);\n    }\n\n    function approve(address spender, uint value) external returns (bool) {\n        _approve(msg.sender, spender, value);\n        return true;\n    }\n\n    function transfer(address to, uint value) external returns (bool) {\n        _transfer(msg.sender, to, value);\n        return true;\n    }\n\n    function transferFrom(\n        address from,\n        address to,\n        uint value\n    ) external returns (bool) {\n        if (allowance[from][msg.sender] != type(uint).max) {\n            allowance[from][msg.sender] = allowance[from][msg.sender].sub(value);\n        }\n        _transfer(from, to, value);\n        return true;\n    }\n\n    function increaseAllowance(address spender, uint addedValue) public virtual returns (bool) {\n        _approve(msg.sender, spender, allowance[msg.sender][spender].add(addedValue));\n        return true;\n    }\n\n    function decreaseAllowance(address spender, uint subtractedValue) public virtual returns (bool) {\n        _approve(msg.sender, spender, allowance[msg.sender][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\n        return true;\n    }\n\n    function permit(\n        address owner,\n        address spender,\n        uint value,\n        uint deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external {\n        require(deadline >= block.timestamp, \"Bridge: EXPIRED\");\n        bytes32 digest = keccak256(abi.encodePacked(\"\\x19\\x01\", DOMAIN_SEPARATOR, keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline))));\n        address recoveredAddress = ecrecover(digest, v, r, s);\n        require(recoveredAddress != address(0) && recoveredAddress == owner, \"Bridge: INVALID_SIGNATURE\");\n        _approve(owner, spender, value);\n    }\n}\n"
    },
    "contracts/mocks/LZEndpointMock.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\npragma abicoder v2;\n\nimport \"../interfaces/ILayerZeroReceiver.sol\";\nimport \"../interfaces/ILayerZeroEndpoint.sol\";\nimport \"../libs/LzLib.sol\";\n\n/*\nlike a real LayerZero endpoint but can be mocked, which handle message transmission, verification, and receipt.\n- blocking: LayerZero provides ordered delivery of messages from a given sender to a destination chain.\n- non-reentrancy: endpoint has a non-reentrancy guard for both the send() and receive(), respectively.\n- adapter parameters: allows UAs to add arbitrary transaction params in the send() function, like airdrop on destination chain.\nunlike a real LayerZero endpoint, it is\n- no messaging library versioning\n- send() will short circuit to lzReceive()\n- no user application configuration\n*/\ncontract LZEndpointMock is ILayerZeroEndpoint {\n    uint8 internal constant _NOT_ENTERED = 1;\n    uint8 internal constant _ENTERED = 2;\n\n    mapping(address => address) public lzEndpointLookup;\n\n    uint16 public mockChainId;\n    bool public nextMsgBlocked;\n\n    // fee config\n    RelayerFeeConfig public relayerFeeConfig;\n    ProtocolFeeConfig public protocolFeeConfig;\n    uint public oracleFee;\n    bytes public defaultAdapterParams;\n\n    // path = remote addrss + local address\n    // inboundNonce = [srcChainId][path].\n    mapping(uint16 => mapping(bytes => uint64)) public inboundNonce;\n    //todo: this is a hack\n    // outboundNonce = [dstChainId][srcAddress]\n    mapping(uint16 => mapping(address => uint64)) public outboundNonce;\n    //    // outboundNonce = [dstChainId][path].\n    //    mapping(uint16 => mapping(bytes => uint64)) public outboundNonce;\n    // storedPayload = [srcChainId][path]\n    mapping(uint16 => mapping(bytes => StoredPayload)) public storedPayload;\n    // msgToDeliver = [srcChainId][path]\n    mapping(uint16 => mapping(bytes => QueuedPayload[])) public msgsToDeliver;\n\n    // reentrancy guard\n    uint8 internal _send_entered_state = 1;\n    uint8 internal _receive_entered_state = 1;\n\n    struct ProtocolFeeConfig {\n        uint zroFee;\n        uint nativeBP;\n    }\n\n    struct RelayerFeeConfig {\n        uint128 dstPriceRatio; // 10^10\n        uint128 dstGasPriceInWei;\n        uint128 dstNativeAmtCap;\n        uint64 baseGas;\n        uint64 gasPerByte;\n    }\n\n    struct StoredPayload {\n        uint64 payloadLength;\n        address dstAddress;\n        bytes32 payloadHash;\n    }\n\n    struct QueuedPayload {\n        address dstAddress;\n        uint64 nonce;\n        bytes payload;\n    }\n\n    modifier sendNonReentrant() {\n        require(_send_entered_state == _NOT_ENTERED, \"LayerZeroMock: no send reentrancy\");\n        _send_entered_state = _ENTERED;\n        _;\n        _send_entered_state = _NOT_ENTERED;\n    }\n\n    modifier receiveNonReentrant() {\n        require(_receive_entered_state == _NOT_ENTERED, \"LayerZeroMock: no receive reentrancy\");\n        _receive_entered_state = _ENTERED;\n        _;\n        _receive_entered_state = _NOT_ENTERED;\n    }\n\n    event UaForceResumeReceive(uint16 chainId, bytes srcAddress);\n    event PayloadCleared(uint16 srcChainId, bytes srcAddress, uint64 nonce, address dstAddress);\n    event PayloadStored(uint16 srcChainId, bytes srcAddress, address dstAddress, uint64 nonce, bytes payload, bytes reason);\n    event ValueTransferFailed(address indexed to, uint indexed quantity);\n\n    constructor(uint16 _chainId) {\n        mockChainId = _chainId;\n\n        // init config\n        relayerFeeConfig = RelayerFeeConfig({\n            dstPriceRatio: 1e10, // 1:1, same chain, same native coin\n            dstGasPriceInWei: 1e10,\n            dstNativeAmtCap: 1e19,\n            baseGas: 100,\n            gasPerByte: 1\n        });\n        protocolFeeConfig = ProtocolFeeConfig({zroFee: 1e18, nativeBP: 1000}); // BP 0.1\n        oracleFee = 1e16;\n        defaultAdapterParams = LzLib.buildDefaultAdapterParams(200000);\n    }\n\n    // ------------------------------ ILayerZeroEndpoint Functions ------------------------------\n    function send(\n        uint16 _chainId,\n        bytes memory _path,\n        bytes calldata _payload,\n        address payable _refundAddress,\n        address _zroPaymentAddress,\n        bytes memory _adapterParams\n    ) external payable override sendNonReentrant {\n        require(_path.length == 40, \"LayerZeroMock: incorrect remote address size\"); // only support evm chains\n\n        address dstAddr;\n        assembly {\n            dstAddr := mload(add(_path, 20))\n        }\n\n        address lzEndpoint = lzEndpointLookup[dstAddr];\n        require(lzEndpoint != address(0), \"LayerZeroMock: destination LayerZero Endpoint not found\");\n\n        // not handle zro token\n        bytes memory adapterParams = _adapterParams.length > 0 ? _adapterParams : defaultAdapterParams;\n        (uint nativeFee, ) = estimateFees(_chainId, msg.sender, _payload, _zroPaymentAddress != address(0x0), adapterParams);\n        require(msg.value >= nativeFee, \"LayerZeroMock: not enough native for fees\");\n\n        uint64 nonce = ++outboundNonce[_chainId][msg.sender];\n\n        // refund if they send too much\n        uint amount = msg.value - nativeFee;\n        if (amount > 0) {\n            (bool success, ) = _refundAddress.call{value: amount}(\"\");\n            require(success, \"LayerZeroMock: failed to refund\");\n        }\n\n        // Mock the process of receiving msg on dst chain\n        // Mock the relayer paying the dstNativeAddr the amount of extra native token\n        (, uint extraGas, uint dstNativeAmt, address payable dstNativeAddr) = LzLib.decodeAdapterParams(adapterParams);\n        if (dstNativeAmt > 0) {\n            (bool success, ) = dstNativeAddr.call{value: dstNativeAmt}(\"\");\n            if (!success) {\n                emit ValueTransferFailed(dstNativeAddr, dstNativeAmt);\n            }\n        }\n\n        bytes memory srcUaAddress = abi.encodePacked(msg.sender, dstAddr); // cast this address to bytes\n        bytes memory payload = _payload;\n        LZEndpointMock(lzEndpoint).receivePayload(mockChainId, srcUaAddress, dstAddr, nonce, extraGas, payload);\n    }\n\n    function receivePayload(\n        uint16 _srcChainId,\n        bytes calldata _path,\n        address _dstAddress,\n        uint64 _nonce,\n        uint _gasLimit,\n        bytes calldata _payload\n    ) external override receiveNonReentrant {\n        StoredPayload storage sp = storedPayload[_srcChainId][_path];\n\n        // assert and increment the nonce. no message shuffling\n        require(_nonce == ++inboundNonce[_srcChainId][_path], \"LayerZeroMock: wrong nonce\");\n\n        // queue the following msgs inside of a stack to simulate a successful send on src, but not fully delivered on dst\n        if (sp.payloadHash != bytes32(0)) {\n            QueuedPayload[] storage msgs = msgsToDeliver[_srcChainId][_path];\n            QueuedPayload memory newMsg = QueuedPayload(_dstAddress, _nonce, _payload);\n\n            // warning, might run into gas issues trying to forward through a bunch of queued msgs\n            // shift all the msgs over so we can treat this like a fifo via array.pop()\n            if (msgs.length > 0) {\n                // extend the array\n                msgs.push(newMsg);\n\n                // shift all the indexes up for pop()\n                for (uint i = 0; i < msgs.length - 1; i++) {\n                    msgs[i + 1] = msgs[i];\n                }\n\n                // put the newMsg at the bottom of the stack\n                msgs[0] = newMsg;\n            } else {\n                msgs.push(newMsg);\n            }\n        } else if (nextMsgBlocked) {\n            storedPayload[_srcChainId][_path] = StoredPayload(uint64(_payload.length), _dstAddress, keccak256(_payload));\n            emit PayloadStored(_srcChainId, _path, _dstAddress, _nonce, _payload, bytes(\"\"));\n            // ensure the next msgs that go through are no longer blocked\n            nextMsgBlocked = false;\n        } else {\n            try ILayerZeroReceiver(_dstAddress).lzReceive{gas: _gasLimit}(_srcChainId, _path, _nonce, _payload) {} catch (bytes memory reason) {\n                storedPayload[_srcChainId][_path] = StoredPayload(uint64(_payload.length), _dstAddress, keccak256(_payload));\n                emit PayloadStored(_srcChainId, _path, _dstAddress, _nonce, _payload, reason);\n                // ensure the next msgs that go through are no longer blocked\n                nextMsgBlocked = false;\n            }\n        }\n    }\n\n    function getInboundNonce(uint16 _chainID, bytes calldata _path) external view override returns (uint64) {\n        return inboundNonce[_chainID][_path];\n    }\n\n    function getOutboundNonce(uint16 _chainID, address _srcAddress) external view override returns (uint64) {\n        return outboundNonce[_chainID][_srcAddress];\n    }\n\n    function estimateFees(\n        uint16 _dstChainId,\n        address _userApplication,\n        bytes memory _payload,\n        bool _payInZRO,\n        bytes memory _adapterParams\n    ) public view returns (uint nativeFee, uint zroFee) {\n        bytes memory adapterParams = _adapterParams.length > 0 ? _adapterParams : defaultAdapterParams;\n\n        // Relayer Fee\n        uint relayerFee = _getRelayerFee(_dstChainId, 1, _userApplication, _payload.length, adapterParams);\n\n        // LayerZero Fee\n        uint protocolFee = _getProtocolFees(_payInZRO, relayerFee, oracleFee);\n        _payInZRO ? zroFee = protocolFee : nativeFee = protocolFee;\n\n        // return the sum of fees\n        nativeFee = nativeFee + relayerFee + oracleFee;\n    }\n\n    function getChainId() external view override returns (uint16) {\n        return mockChainId;\n    }\n\n    function retryPayload(\n        uint16 _srcChainId,\n        bytes calldata _path,\n        bytes calldata _payload\n    ) external override {\n        StoredPayload storage sp = storedPayload[_srcChainId][_path];\n        require(sp.payloadHash != bytes32(0), \"LayerZeroMock: no stored payload\");\n        require(_payload.length == sp.payloadLength && keccak256(_payload) == sp.payloadHash, \"LayerZeroMock: invalid payload\");\n\n        address dstAddress = sp.dstAddress;\n        // empty the storedPayload\n        sp.payloadLength = 0;\n        sp.dstAddress = address(0);\n        sp.payloadHash = bytes32(0);\n\n        uint64 nonce = inboundNonce[_srcChainId][_path];\n\n        ILayerZeroReceiver(dstAddress).lzReceive(_srcChainId, _path, nonce, _payload);\n        emit PayloadCleared(_srcChainId, _path, nonce, dstAddress);\n    }\n\n    function hasStoredPayload(uint16 _srcChainId, bytes calldata _path) external view override returns (bool) {\n        StoredPayload storage sp = storedPayload[_srcChainId][_path];\n        return sp.payloadHash != bytes32(0);\n    }\n\n    function getSendLibraryAddress(address) external view override returns (address) {\n        return address(this);\n    }\n\n    function getReceiveLibraryAddress(address) external view override returns (address) {\n        return address(this);\n    }\n\n    function isSendingPayload() external view override returns (bool) {\n        return _send_entered_state == _ENTERED;\n    }\n\n    function isReceivingPayload() external view override returns (bool) {\n        return _receive_entered_state == _ENTERED;\n    }\n\n    function getConfig(\n        uint16, /*_version*/\n        uint16, /*_chainId*/\n        address, /*_ua*/\n        uint /*_configType*/\n    ) external pure override returns (bytes memory) {\n        return \"\";\n    }\n\n    function getSendVersion(\n        address /*_userApplication*/\n    ) external pure override returns (uint16) {\n        return 1;\n    }\n\n    function getReceiveVersion(\n        address /*_userApplication*/\n    ) external pure override returns (uint16) {\n        return 1;\n    }\n\n    function setConfig(\n        uint16, /*_version*/\n        uint16, /*_chainId*/\n        uint, /*_configType*/\n        bytes memory /*_config*/\n    ) external override {}\n\n    function setSendVersion(\n        uint16 /*version*/\n    ) external override {}\n\n    function setReceiveVersion(\n        uint16 /*version*/\n    ) external override {}\n\n    function forceResumeReceive(uint16 _srcChainId, bytes calldata _path) external override {\n        StoredPayload storage sp = storedPayload[_srcChainId][_path];\n        // revert if no messages are cached. safeguard malicious UA behaviour\n        require(sp.payloadHash != bytes32(0), \"LayerZeroMock: no stored payload\");\n        require(sp.dstAddress == msg.sender, \"LayerZeroMock: invalid caller\");\n\n        // empty the storedPayload\n        sp.payloadLength = 0;\n        sp.dstAddress = address(0);\n        sp.payloadHash = bytes32(0);\n\n        emit UaForceResumeReceive(_srcChainId, _path);\n\n        // resume the receiving of msgs after we force clear the \"stuck\" msg\n        _clearMsgQue(_srcChainId, _path);\n    }\n\n    // ------------------------------ Other Public/External Functions --------------------------------------------------\n\n    function getLengthOfQueue(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (uint) {\n        return msgsToDeliver[_srcChainId][_srcAddress].length;\n    }\n\n    // used to simulate messages received get stored as a payload\n    function blockNextMsg() external {\n        nextMsgBlocked = true;\n    }\n\n    function setDestLzEndpoint(address destAddr, address lzEndpointAddr) external {\n        lzEndpointLookup[destAddr] = lzEndpointAddr;\n    }\n\n    function setRelayerPrice(\n        uint128 _dstPriceRatio,\n        uint128 _dstGasPriceInWei,\n        uint128 _dstNativeAmtCap,\n        uint64 _baseGas,\n        uint64 _gasPerByte\n    ) external {\n        relayerFeeConfig.dstPriceRatio = _dstPriceRatio;\n        relayerFeeConfig.dstGasPriceInWei = _dstGasPriceInWei;\n        relayerFeeConfig.dstNativeAmtCap = _dstNativeAmtCap;\n        relayerFeeConfig.baseGas = _baseGas;\n        relayerFeeConfig.gasPerByte = _gasPerByte;\n    }\n\n    function setProtocolFee(uint _zroFee, uint _nativeBP) external {\n        protocolFeeConfig.zroFee = _zroFee;\n        protocolFeeConfig.nativeBP = _nativeBP;\n    }\n\n    function setOracleFee(uint _oracleFee) external {\n        oracleFee = _oracleFee;\n    }\n\n    function setDefaultAdapterParams(bytes memory _adapterParams) external {\n        defaultAdapterParams = _adapterParams;\n    }\n\n    // --------------------- Internal Functions ---------------------\n    // simulates the relayer pushing through the rest of the msgs that got delayed due to the stored payload\n    function _clearMsgQue(uint16 _srcChainId, bytes calldata _path) internal {\n        QueuedPayload[] storage msgs = msgsToDeliver[_srcChainId][_path];\n\n        // warning, might run into gas issues trying to forward through a bunch of queued msgs\n        while (msgs.length > 0) {\n            QueuedPayload memory payload = msgs[msgs.length - 1];\n            ILayerZeroReceiver(payload.dstAddress).lzReceive(_srcChainId, _path, payload.nonce, payload.payload);\n            msgs.pop();\n        }\n    }\n\n    function _getProtocolFees(\n        bool _payInZro,\n        uint _relayerFee,\n        uint _oracleFee\n    ) internal view returns (uint) {\n        if (_payInZro) {\n            return protocolFeeConfig.zroFee;\n        } else {\n            return ((_relayerFee + _oracleFee) * protocolFeeConfig.nativeBP) / 10000;\n        }\n    }\n\n    function _getRelayerFee(\n        uint16, /* _dstChainId */\n        uint16, /* _outboundProofType */\n        address, /* _userApplication */\n        uint _payloadSize,\n        bytes memory _adapterParams\n    ) internal view returns (uint) {\n        (uint16 txType, uint extraGas, uint dstNativeAmt, ) = LzLib.decodeAdapterParams(_adapterParams);\n        uint totalRemoteToken; // = baseGas + extraGas + requiredNativeAmount\n        if (txType == 2) {\n            require(relayerFeeConfig.dstNativeAmtCap >= dstNativeAmt, \"LayerZeroMock: dstNativeAmt too large \");\n            totalRemoteToken += dstNativeAmt;\n        }\n        // remoteGasTotal = dstGasPriceInWei * (baseGas + extraGas)\n        uint remoteGasTotal = relayerFeeConfig.dstGasPriceInWei * (relayerFeeConfig.baseGas + extraGas);\n        totalRemoteToken += remoteGasTotal;\n\n        // tokenConversionRate = dstPrice / localPrice\n        // basePrice = totalRemoteToken * tokenConversionRate\n        uint basePrice = (totalRemoteToken * relayerFeeConfig.dstPriceRatio) / 10**10;\n\n        // pricePerByte = (dstGasPriceInWei * gasPerBytes) * tokenConversionRate\n        uint pricePerByte = (relayerFeeConfig.dstGasPriceInWei * relayerFeeConfig.gasPerByte * relayerFeeConfig.dstPriceRatio) / 10**10;\n\n        return basePrice + _payloadSize * pricePerByte;\n    }\n}\n"
    },
    "contracts/mocks/StargateBridgeMock.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\npragma abicoder v2;\n\n// imports\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\nimport \"./StargatePoolMock.sol\";\nimport \"./StargateRouterMock.sol\";\n\n// libraries\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"../interfaces/ILayerZeroReceiver.sol\";\nimport \"../interfaces/ILayerZeroEndpoint.sol\";\nimport \"../interfaces/ILayerZeroUserApplicationConfig.sol\";\n\ncontract StargateBridgeMock is Ownable, ILayerZeroReceiver, ILayerZeroUserApplicationConfig {\n    using SafeMath for uint;\n\n    //---------------------------------------------------------------------------\n    // CONSTANTS\n    uint8 internal constant TYPE_SWAP_REMOTE = 1;\n    uint8 internal constant TYPE_ADD_LIQUIDITY = 2;\n    uint8 internal constant TYPE_REDEEM_LOCAL_CALL_BACK = 3;\n    uint8 internal constant TYPE_WITHDRAW_REMOTE = 4;\n\n    //---------------------------------------------------------------------------\n    // VARIABLES\n    ILayerZeroEndpoint public immutable layerZeroEndpoint;\n    mapping(uint16 => bytes) public bridgeLookup;\n    mapping(uint16 => mapping(uint8 => uint)) public gasLookup;\n    StargateRouterMock public immutable router;\n    bool public useLayerZeroToken;\n\n    //---------------------------------------------------------------------------\n    // EVENTS\n    event SendMsg(uint8 msgType, uint64 nonce);\n\n    //---------------------------------------------------------------------------\n    // MODIFIERS\n    modifier onlyRouter() {\n        require(msg.sender == address(router), \"Stargate: caller must be Router.\");\n        _;\n    }\n\n    constructor(address _layerZeroEndpoint, address _router) {\n        require(_layerZeroEndpoint != address(0x0), \"Stargate: _layerZeroEndpoint cannot be 0x0\");\n        require(_router != address(0x0), \"Stargate: _router cannot be 0x0\");\n        layerZeroEndpoint = ILayerZeroEndpoint(_layerZeroEndpoint);\n        router = StargateRouterMock(_router);\n    }\n\n    //---------------------------------------------------------------------------\n    // EXTERNAL functions\n\n    function lzReceive(\n        uint16 _srcChainId,\n        bytes memory _srcAddress,\n        uint64 _nonce,\n        bytes memory _payload\n    ) external override {\n        require(msg.sender == address(layerZeroEndpoint), \"Stargate: only LayerZero endpoint can call lzReceive\");\n        require(_srcAddress.length == bridgeLookup[_srcChainId].length && keccak256(_srcAddress) == keccak256(bridgeLookup[_srcChainId]), \"Stargate: bridge does not match\");\n\n        uint8 functionType;\n        assembly {\n            functionType := mload(add(_payload, 32))\n        }\n\n        if (functionType == TYPE_SWAP_REMOTE) {\n            (, uint srcPoolId, uint dstPoolId, uint dstGasForCall, StargatePoolMock.CreditObj memory c, StargatePoolMock.SwapObj memory s, bytes memory to, bytes memory payload) = abi.decode(_payload, (uint8, uint, uint, uint, StargatePoolMock.CreditObj, StargatePoolMock.SwapObj, bytes, bytes));\n            address toAddress;\n            assembly {\n                toAddress := mload(add(to, 20))\n            }\n            router.creditChainPath(_srcChainId, srcPoolId, dstPoolId, c);\n            router.swapRemote(_srcChainId, _srcAddress, _nonce, srcPoolId, dstPoolId, dstGasForCall, toAddress, s, payload);\n        } else if (functionType == TYPE_ADD_LIQUIDITY) {\n            (, uint srcPoolId, uint dstPoolId, StargatePoolMock.CreditObj memory c) = abi.decode(_payload, (uint8, uint, uint, StargatePoolMock.CreditObj));\n            router.creditChainPath(_srcChainId, srcPoolId, dstPoolId, c);\n        } else if (functionType == TYPE_REDEEM_LOCAL_CALL_BACK) {\n            (, uint srcPoolId, uint dstPoolId, StargatePoolMock.CreditObj memory c, uint amountSD, uint mintAmountSD, bytes memory to) = abi.decode(_payload, (uint8, uint, uint, StargatePoolMock.CreditObj, uint, uint, bytes));\n            address toAddress;\n            assembly {\n                toAddress := mload(add(to, 20))\n            }\n            router.creditChainPath(_srcChainId, srcPoolId, dstPoolId, c);\n            router.redeemLocalCallback(_srcChainId, _srcAddress, _nonce, srcPoolId, dstPoolId, toAddress, amountSD, mintAmountSD);\n        } else if (functionType == TYPE_WITHDRAW_REMOTE) {\n            (, uint srcPoolId, uint dstPoolId, StargatePoolMock.CreditObj memory c, uint amountSD, bytes memory to) = abi.decode(_payload, (uint8, uint, uint, StargatePoolMock.CreditObj, uint, bytes));\n            router.creditChainPath(_srcChainId, srcPoolId, dstPoolId, c);\n            router.redeemLocalCheckOnRemote(_srcChainId, _srcAddress, _nonce, srcPoolId, dstPoolId, amountSD, to);\n        }\n    }\n\n    //---------------------------------------------------------------------------\n    // LOCAL CHAIN FUNCTIONS\n    function swap(\n        uint16 _chainId,\n        uint _srcPoolId,\n        uint _dstPoolId,\n        address payable _refundAddress,\n        StargatePoolMock.CreditObj memory _c,\n        StargatePoolMock.SwapObj memory _s,\n        IStargateRouter.lzTxObj memory _lzTxParams,\n        bytes calldata _to,\n        bytes calldata _payload\n    ) external payable onlyRouter {\n        bytes memory payload = abi.encode(TYPE_SWAP_REMOTE, _srcPoolId, _dstPoolId, _lzTxParams.dstGasForCall, _c, _s, _to, _payload);\n        _call(_chainId, TYPE_SWAP_REMOTE, _refundAddress, _lzTxParams, payload);\n    }\n\n    function redeemLocalCallback(\n        uint16 _chainId,\n        address payable _refundAddress,\n        StargatePoolMock.CreditObj memory _c,\n        IStargateRouter.lzTxObj memory _lzTxParams,\n        bytes memory _payload\n    ) external payable onlyRouter {\n        bytes memory payload;\n\n        {\n            (, uint srcPoolId, uint dstPoolId, uint amountSD, uint mintAmountSD, bytes memory to) = abi.decode(_payload, (uint8, uint, uint, uint, uint, bytes));\n\n            // swap dst and src because we are headed back\n            payload = abi.encode(TYPE_REDEEM_LOCAL_CALL_BACK, dstPoolId, srcPoolId, _c, amountSD, mintAmountSD, to);\n        }\n\n        _call(_chainId, TYPE_REDEEM_LOCAL_CALL_BACK, _refundAddress, _lzTxParams, payload);\n    }\n\n    function redeemLocal(\n        uint16 _chainId,\n        uint _srcPoolId,\n        uint _dstPoolId,\n        address payable _refundAddress,\n        StargatePoolMock.CreditObj memory _c,\n        uint _amountSD,\n        bytes calldata _to,\n        IStargateRouter.lzTxObj memory _lzTxParams\n    ) external payable onlyRouter {\n        bytes memory payload = abi.encode(TYPE_WITHDRAW_REMOTE, _srcPoolId, _dstPoolId, _c, _amountSD, _to);\n        _call(_chainId, TYPE_WITHDRAW_REMOTE, _refundAddress, _lzTxParams, payload);\n    }\n\n    function sendCredits(\n        uint16 _chainId,\n        uint _srcPoolId,\n        uint _dstPoolId,\n        address payable _refundAddress,\n        StargatePoolMock.CreditObj memory _c\n    ) external payable onlyRouter {\n        bytes memory payload = abi.encode(TYPE_ADD_LIQUIDITY, _srcPoolId, _dstPoolId, _c);\n        IStargateRouter.lzTxObj memory lzTxObj = IStargateRouter.lzTxObj(0, 0, \"0x\");\n        _call(_chainId, TYPE_ADD_LIQUIDITY, _refundAddress, lzTxObj, payload);\n    }\n\n    function quoteLayerZeroFee(\n        uint16 _chainId,\n        uint8 _functionType,\n        bytes calldata _toAddress,\n        bytes calldata _transferAndCallPayload,\n        IStargateRouter.lzTxObj memory _lzTxParams\n    ) external view returns (uint, uint) {\n        bytes memory payload = \"\";\n        StargatePoolMock.CreditObj memory c = StargatePoolMock.CreditObj(1, 1);\n        if (_functionType == TYPE_SWAP_REMOTE) {\n            StargatePoolMock.SwapObj memory s = StargatePoolMock.SwapObj(1, 1, 1, 1, 1, 1);\n            payload = abi.encode(TYPE_SWAP_REMOTE, 0, 0, 0, c, s, _toAddress, _transferAndCallPayload);\n        } else if (_functionType == TYPE_ADD_LIQUIDITY) {\n            payload = abi.encode(TYPE_ADD_LIQUIDITY, 0, 0, c);\n        } else if (_functionType == TYPE_REDEEM_LOCAL_CALL_BACK) {\n            payload = abi.encode(TYPE_REDEEM_LOCAL_CALL_BACK, 0, 0, c, 0, 0, _toAddress);\n        } else if (_functionType == TYPE_WITHDRAW_REMOTE) {\n            payload = abi.encode(TYPE_WITHDRAW_REMOTE, 0, 0, c, 0, _toAddress);\n        } else {\n            revert(\"Stargate: unsupported function type\");\n        }\n\n        bytes memory lzTxParamBuilt = _txParamBuilder(_chainId, _functionType, _lzTxParams);\n        return layerZeroEndpoint.estimateFees(_chainId, address(this), payload, useLayerZeroToken, lzTxParamBuilt);\n    }\n\n    //---------------------------------------------------------------------------\n    // dao functions\n    function setBridge(uint16 _chainId, bytes calldata _bridgeAddress) external onlyOwner {\n        require(bridgeLookup[_chainId].length == 0, \"Stargate: Bridge already set!\");\n        bridgeLookup[_chainId] = _bridgeAddress;\n    }\n\n    function setGasAmount(\n        uint16 _chainId,\n        uint8 _functionType,\n        uint _gasAmount\n    ) external onlyOwner {\n        require(_functionType >= 1 && _functionType <= 4, \"Stargate: invalid _functionType\");\n        gasLookup[_chainId][_functionType] = _gasAmount;\n    }\n\n    function approveTokenSpender(\n        address token,\n        address spender,\n        uint amount\n    ) external onlyOwner {\n        IERC20(token).approve(spender, amount);\n    }\n\n    function setUseLayerZeroToken(bool enable) external onlyOwner {\n        useLayerZeroToken = enable;\n    }\n\n    function forceResumeReceive(uint16 _srcChainId, bytes calldata _srcAddress) external override onlyOwner {\n        layerZeroEndpoint.forceResumeReceive(_srcChainId, _srcAddress);\n    }\n\n    //---------------------------------------------------------------------------\n    // generic config for user Application\n    function setConfig(\n        uint16 _version,\n        uint16 _chainId,\n        uint _configType,\n        bytes calldata _config\n    ) external override onlyOwner {\n        layerZeroEndpoint.setConfig(_version, _chainId, _configType, _config);\n    }\n\n    function setSendVersion(uint16 version) external override onlyOwner {\n        layerZeroEndpoint.setSendVersion(version);\n    }\n\n    function setReceiveVersion(uint16 version) external override onlyOwner {\n        layerZeroEndpoint.setReceiveVersion(version);\n    }\n\n    //---------------------------------------------------------------------------\n    // INTERNAL functions\n    function txParamBuilderType1(uint _gasAmount) internal pure returns (bytes memory) {\n        uint16 txType = 1;\n        return abi.encodePacked(txType, _gasAmount);\n    }\n\n    function txParamBuilderType2(\n        uint _gasAmount,\n        uint _dstNativeAmount,\n        bytes memory _dstNativeAddr\n    ) internal pure returns (bytes memory) {\n        uint16 txType = 2;\n        return abi.encodePacked(txType, _gasAmount, _dstNativeAmount, _dstNativeAddr);\n    }\n\n    function _txParamBuilder(\n        uint16 _chainId,\n        uint8 _type,\n        IStargateRouter.lzTxObj memory _lzTxParams\n    ) internal view returns (bytes memory) {\n        bytes memory lzTxParam;\n        address dstNativeAddr;\n        {\n            bytes memory dstNativeAddrBytes = _lzTxParams.dstNativeAddr;\n            assembly {\n                dstNativeAddr := mload(add(dstNativeAddrBytes, 20))\n            }\n        }\n\n        uint totalGas = gasLookup[_chainId][_type].add(_lzTxParams.dstGasForCall);\n        if (_lzTxParams.dstNativeAmount > 0 && dstNativeAddr != address(0x0)) {\n            lzTxParam = txParamBuilderType2(totalGas, _lzTxParams.dstNativeAmount, _lzTxParams.dstNativeAddr);\n        } else {\n            lzTxParam = txParamBuilderType1(totalGas);\n        }\n\n        return lzTxParam;\n    }\n\n    function _call(\n        uint16 _chainId,\n        uint8 _type,\n        address payable _refundAddress,\n        IStargateRouter.lzTxObj memory _lzTxParams,\n        bytes memory _payload\n    ) internal {\n        bytes memory lzTxParamBuilt = _txParamBuilder(_chainId, _type, _lzTxParams);\n        uint64 nextNonce = layerZeroEndpoint.getOutboundNonce(_chainId, address(this)) + 1;\n        layerZeroEndpoint.send{value: msg.value}(_chainId, bridgeLookup[_chainId], _payload, _refundAddress, address(this), lzTxParamBuilt);\n        emit SendMsg(_type, nextNonce);\n    }\n\n    function renounceOwnership() public override onlyOwner {}\n}\n"
    },
    "contracts/mocks/StargateFactoryMock.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\npragma abicoder v2;\n\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"./StargatePoolMock.sol\";\n\ncontract StargateFactoryMock is Ownable {\n    using SafeMath for uint;\n\n    //---------------------------------------------------------------------------\n    // VARIABLES\n    mapping(uint => StargatePoolMock) public getPool; // poolId -> PoolInfo\n    address[] public allPools;\n    address public immutable router;\n    address public defaultFeeLibrary; // address for retrieving fee params for swaps\n\n    //---------------------------------------------------------------------------\n    // MODIFIERS\n    modifier onlyRouter() {\n        require(msg.sender == router, \"Stargate: caller must be Router.\");\n        _;\n    }\n\n    constructor(address _router) {\n        require(_router != address(0x0), \"Stargate: _router cant be 0x0\"); // 1 time only\n        router = _router;\n    }\n\n    function setDefaultFeeLibrary(address _defaultFeeLibrary) external onlyOwner {\n        require(_defaultFeeLibrary != address(0x0), \"Stargate: fee library cant be 0x0\");\n        defaultFeeLibrary = _defaultFeeLibrary;\n    }\n\n    function allPoolsLength() external view returns (uint) {\n        return allPools.length;\n    }\n\n    function createPool(\n        uint _poolId,\n        address _token,\n        uint8 _sharedDecimals,\n        uint8 _localDecimals,\n        string memory _name,\n        string memory _symbol\n    ) public onlyRouter returns (address poolAddress) {\n        require(address(getPool[_poolId]) == address(0x0), \"Stargate: Pool already created\");\n\n        StargatePoolMock pool = new StargatePoolMock(_poolId, router, _token, _sharedDecimals, _localDecimals, defaultFeeLibrary, _name, _symbol);\n        getPool[_poolId] = pool;\n        poolAddress = address(pool);\n        allPools.push(poolAddress);\n    }\n\n    function renounceOwnership() public override onlyOwner {}\n}\n"
    },
    "contracts/mocks/StargatePoolMock.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\npragma abicoder v2;\n\n// imports\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"./LPTokenERC20Mock.sol\";\nimport \"../interfaces/IStargateFeeLibrary.sol\";\n\n// libraries\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\n\n/// Pool contracts on other chains and managed by the Stargate protocol.\ncontract StargatePoolMock is LPTokenERC20Mock, ReentrancyGuard {\n    using SafeMath for uint;\n\n    //---------------------------------------------------------------------------\n    // CONSTANTS\n    bytes4 private constant SELECTOR = bytes4(keccak256(bytes(\"transfer(address,uint256)\")));\n    uint public constant BP_DENOMINATOR = 10000;\n\n    //---------------------------------------------------------------------------\n    // STRUCTS\n    struct ChainPath {\n        bool ready; // indicate if the counter chainPath has been created.\n        uint16 dstChainId;\n        uint dstPoolId;\n        uint weight;\n        uint balance;\n        uint lkb;\n        uint credits;\n        uint idealBalance;\n    }\n\n    struct SwapObj {\n        uint amount;\n        uint eqFee;\n        uint eqReward;\n        uint lpFee;\n        uint protocolFee;\n        uint lkbRemove;\n    }\n\n    struct CreditObj {\n        uint credits;\n        uint idealBalance;\n    }\n\n    //---------------------------------------------------------------------------\n    // VARIABLES\n\n    // chainPath\n    ChainPath[] public chainPaths; // list of connected chains with shared pools\n    mapping(uint16 => mapping(uint => uint)) public chainPathIndexLookup; // lookup for chainPath by chainId => poolId =>index\n\n    // metadata\n    uint public immutable poolId; // shared id between chains to represent same pool\n    uint public sharedDecimals; // the shared decimals (lowest common decimals between chains)\n    uint public localDecimals; // the decimals for the token\n    uint public immutable convertRate; // the decimals for the token\n    address public immutable token; // the token for the pool\n    address public immutable router; // the token for the pool\n\n    bool public stopSwap; // flag to stop swapping in extreme cases\n\n    // Fee and Liquidity\n    uint public totalLiquidity; // the total amount of tokens added on this side of the chain (fees + deposits - withdrawals)\n    uint public totalWeight; // total weight for pool percentages\n    uint public mintFeeBP; // fee basis points for the mint/deposit\n    uint public protocolFeeBalance; // fee balance created from dao fee\n    uint public mintFeeBalance; // fee balance created from mint fee\n    uint public eqFeePool; // pool rewards in Shared Decimal format. indicate the total budget for reverse swap incentive\n    address public feeLibrary; // address for retrieving fee params for swaps\n\n    // Delta related\n    uint public deltaCredit; // credits accumulated from txn\n    bool public batched; // flag to indicate if we want batch processing.\n    bool public defaultSwapMode; // flag for the default mode for swap\n    bool public defaultLPMode; // flag for the default mode for lp\n    uint public swapDeltaBP; // basis points of poolCredits to activate Delta in swap\n    uint public lpDeltaBP; // basis points of poolCredits to activate Delta in liquidity events\n\n    //---------------------------------------------------------------------------\n    // EVENTS\n    event Mint(address to, uint amountLP, uint amountSD, uint mintFeeAmountSD);\n    event Burn(address from, uint amountLP, uint amountSD);\n    event RedeemLocalCallback(address _to, uint _amountSD, uint _amountToMintSD);\n    event Swap(uint16 chainId, uint dstPoolId, address from, uint amountSD, uint eqReward, uint eqFee, uint protocolFee, uint lpFee);\n    event SendCredits(uint16 dstChainId, uint dstPoolId, uint credits, uint idealBalance);\n    event RedeemRemote(uint16 chainId, uint dstPoolId, address from, uint amountLP, uint amountSD);\n    event RedeemLocal(address from, uint amountLP, uint amountSD, uint16 chainId, uint dstPoolId, bytes to);\n    event InstantRedeemLocal(address from, uint amountLP, uint amountSD, address to);\n    event CreditChainPath(uint16 chainId, uint srcPoolId, uint amountSD, uint idealBalance);\n    event SwapRemote(address to, uint amountSD, uint protocolFee, uint dstFee);\n    event WithdrawRemote(uint16 srcChainId, uint srcPoolId, uint swapAmount, uint mintAmount);\n    event ChainPathUpdate(uint16 dstChainId, uint dstPoolId, uint weight);\n    event FeesUpdated(uint mintFeeBP);\n    event FeeLibraryUpdated(address feeLibraryAddr);\n    event StopSwapUpdated(bool swapStop);\n    event WithdrawProtocolFeeBalance(address to, uint amountSD);\n    event WithdrawMintFeeBalance(address to, uint amountSD);\n    event DeltaParamUpdated(bool batched, uint swapDeltaBP, uint lpDeltaBP, bool defaultSwapMode, bool defaultLPMode);\n\n    //---------------------------------------------------------------------------\n    // MODIFIERS\n    modifier onlyRouter() {\n        require(msg.sender == router, \"Stargate: only the router can call this method\");\n        _;\n    }\n\n    constructor(\n        uint _poolId,\n        address _router,\n        address _token,\n        uint _sharedDecimals,\n        uint _localDecimals,\n        address _feeLibrary,\n        string memory _name,\n        string memory _symbol\n    ) LPTokenERC20Mock(_name, _symbol) {\n        require(_token != address(0x0), \"Stargate: _token cannot be 0x0\");\n        require(_router != address(0x0), \"Stargate: _router cannot be 0x0\");\n        poolId = _poolId;\n        router = _router;\n        token = _token;\n        sharedDecimals = _sharedDecimals;\n        decimals = uint8(_sharedDecimals);\n        localDecimals = _localDecimals;\n        convertRate = 10**(uint(localDecimals).sub(sharedDecimals));\n        totalWeight = 0;\n        feeLibrary = _feeLibrary;\n\n        //delta algo related\n        batched = false;\n        defaultSwapMode = true;\n        defaultLPMode = true;\n    }\n\n    function getChainPathsLength() public view returns (uint) {\n        return chainPaths.length;\n    }\n\n    //---------------------------------------------------------------------------\n    // LOCAL CHAIN FUNCTIONS\n\n    function mint(address _to, uint _amountLD) external nonReentrant onlyRouter returns (uint) {\n        return _mintLocal(_to, _amountLD, true, true);\n    }\n\n    // Local                                    Remote\n    // -------                                  ---------\n    // swap             ->                      swapRemote\n    function swap(\n        uint16 _dstChainId,\n        uint _dstPoolId,\n        address _from,\n        uint _amountLD,\n        uint _minAmountLD,\n        bool newLiquidity\n    ) external nonReentrant onlyRouter returns (SwapObj memory) {\n        require(!stopSwap, \"Stargate: swap func stopped\");\n        ChainPath storage cp = getAndCheckCP(_dstChainId, _dstPoolId);\n        require(cp.ready == true, \"Stargate: counter chainPath is not ready\");\n\n        uint amountSD = amountLDtoSD(_amountLD);\n        uint minAmountSD = amountLDtoSD(_minAmountLD);\n\n        // request fee params from library\n        SwapObj memory s = IStargateFeeLibrary(feeLibrary).getFees(poolId, _dstPoolId, _dstChainId, _from, amountSD);\n\n        // equilibrium fee and reward. note eqFee/eqReward are separated from swap liquidity\n        eqFeePool = eqFeePool.sub(s.eqReward);\n        // update the new amount the user gets minus the fees\n        s.amount = amountSD.sub(s.eqFee).sub(s.protocolFee).sub(s.lpFee);\n        // users will also get the eqReward\n        require(s.amount.add(s.eqReward) >= minAmountSD, \"Stargate: slippage too high\");\n\n        // behaviours\n        //     - protocolFee: booked, stayed and withdrawn at remote.\n        //     - eqFee: booked, stayed and withdrawn at remote.\n        //     - lpFee: booked and stayed at remote, can be withdrawn anywhere\n\n        s.lkbRemove = amountSD.sub(s.lpFee).add(s.eqReward);\n        // check for transfer solvency.\n        require(cp.balance >= s.lkbRemove, \"Stargate: dst balance too low\");\n        cp.balance = cp.balance.sub(s.lkbRemove);\n\n        if (newLiquidity) {\n            deltaCredit = deltaCredit.add(amountSD).add(s.eqReward);\n        } else if (s.eqReward > 0) {\n            deltaCredit = deltaCredit.add(s.eqReward);\n        }\n\n        // distribute credits on condition.\n        if (!batched || deltaCredit >= totalLiquidity.mul(swapDeltaBP).div(BP_DENOMINATOR)) {\n            _delta(defaultSwapMode);\n        }\n\n        emit Swap(_dstChainId, _dstPoolId, _from, s.amount, s.eqReward, s.eqFee, s.protocolFee, s.lpFee);\n        return s;\n    }\n\n    // Local                                    Remote\n    // -------                                  ---------\n    // sendCredits      ->                      creditChainPath\n    function sendCredits(uint16 _dstChainId, uint _dstPoolId) external nonReentrant onlyRouter returns (CreditObj memory c) {\n        ChainPath storage cp = getAndCheckCP(_dstChainId, _dstPoolId);\n        require(cp.ready == true, \"Stargate: counter chainPath is not ready\");\n        cp.lkb = cp.lkb.add(cp.credits);\n        c.idealBalance = totalLiquidity.mul(cp.weight).div(totalWeight);\n        c.credits = cp.credits;\n        cp.credits = 0;\n        emit SendCredits(_dstChainId, _dstPoolId, c.credits, c.idealBalance);\n    }\n\n    // Local                                    Remote\n    // -------                                  ---------\n    // redeemRemote   ->                        swapRemote\n    function redeemRemote(\n        uint16 _dstChainId,\n        uint _dstPoolId,\n        address _from,\n        uint _amountLP\n    ) external nonReentrant onlyRouter {\n        require(_from != address(0x0), \"Stargate: _from cannot be 0x0\");\n        uint amountSD = _burnLocal(_from, _amountLP);\n        //run Delta\n        if (!batched || deltaCredit > totalLiquidity.mul(lpDeltaBP).div(BP_DENOMINATOR)) {\n            _delta(defaultLPMode);\n        }\n        uint amountLD = amountSDtoLD(amountSD);\n        emit RedeemRemote(_dstChainId, _dstPoolId, _from, _amountLP, amountLD);\n    }\n\n    function instantRedeemLocal(\n        address _from,\n        uint _amountLP,\n        address _to\n    ) external nonReentrant onlyRouter returns (uint amountSD) {\n        require(_from != address(0x0), \"Stargate: _from cannot be 0x0\");\n        uint _deltaCredit = deltaCredit; // sload optimization.\n        uint _capAmountLP = _amountSDtoLP(_deltaCredit);\n\n        if (_amountLP > _capAmountLP) _amountLP = _capAmountLP;\n\n        amountSD = _burnLocal(_from, _amountLP);\n        deltaCredit = _deltaCredit.sub(amountSD);\n        uint amountLD = amountSDtoLD(amountSD);\n        _safeTransfer(token, _to, amountLD);\n        emit InstantRedeemLocal(_from, _amountLP, amountSD, _to);\n    }\n\n    // Local                                    Remote\n    // -------                                  ---------\n    // redeemLocal   ->                         redeemLocalCheckOnRemote\n    // redeemLocalCallback             <-\n    function redeemLocal(\n        address _from,\n        uint _amountLP,\n        uint16 _dstChainId,\n        uint _dstPoolId,\n        bytes calldata _to\n    ) external nonReentrant onlyRouter returns (uint amountSD) {\n        require(_from != address(0x0), \"Stargate: _from cannot be 0x0\");\n\n        // safeguard.\n        require(chainPaths[chainPathIndexLookup[_dstChainId][_dstPoolId]].ready == true, \"Stargate: counter chainPath is not ready\");\n        amountSD = _burnLocal(_from, _amountLP);\n\n        // run Delta\n        if (!batched || deltaCredit > totalLiquidity.mul(lpDeltaBP).div(BP_DENOMINATOR)) {\n            _delta(false);\n        }\n        emit RedeemLocal(_from, _amountLP, amountSD, _dstChainId, _dstPoolId, _to);\n    }\n\n    //---------------------------------------------------------------------------\n    // REMOTE CHAIN FUNCTIONS\n\n    // Local                                    Remote\n    // -------                                  ---------\n    // sendCredits      ->                      creditChainPath\n    function creditChainPath(\n        uint16 _dstChainId,\n        uint _dstPoolId,\n        CreditObj memory _c\n    ) external nonReentrant onlyRouter {\n        ChainPath storage cp = chainPaths[chainPathIndexLookup[_dstChainId][_dstPoolId]];\n        cp.balance = cp.balance.add(_c.credits);\n        if (cp.idealBalance != _c.idealBalance) {\n            cp.idealBalance = _c.idealBalance;\n        }\n        emit CreditChainPath(_dstChainId, _dstPoolId, _c.credits, _c.idealBalance);\n    }\n\n    // Local                                    Remote\n    // -------                                  ---------\n    // swap             ->                      swapRemote\n    function swapRemote(\n        uint16 _srcChainId,\n        uint _srcPoolId,\n        address _to,\n        SwapObj memory _s\n    ) external nonReentrant onlyRouter returns (uint amountLD) {\n        // booking lpFee\n        totalLiquidity = totalLiquidity.add(_s.lpFee);\n        // booking eqFee\n        eqFeePool = eqFeePool.add(_s.eqFee);\n        // booking stargateFee\n        protocolFeeBalance = protocolFeeBalance.add(_s.protocolFee);\n\n        // update LKB\n        uint chainPathIndex = chainPathIndexLookup[_srcChainId][_srcPoolId];\n        chainPaths[chainPathIndex].lkb = chainPaths[chainPathIndex].lkb.sub(_s.lkbRemove);\n\n        // user receives the amount + the srcReward\n        amountLD = amountSDtoLD(_s.amount.add(_s.eqReward));\n        _safeTransfer(token, _to, amountLD);\n        emit SwapRemote(_to, _s.amount.add(_s.eqReward), _s.protocolFee, _s.eqFee);\n    }\n\n    // Local                                    Remote\n    // -------                                  ---------\n    // redeemLocal   ->                         redeemLocalCheckOnRemote\n    // redeemLocalCallback             <-\n    function redeemLocalCallback(\n        uint16 _srcChainId,\n        uint _srcPoolId,\n        address _to,\n        uint _amountSD,\n        uint _amountToMintSD\n    ) external nonReentrant onlyRouter {\n        if (_amountToMintSD > 0) {\n            _mintLocal(_to, amountSDtoLD(_amountToMintSD), false, false);\n        }\n\n        ChainPath storage cp = getAndCheckCP(_srcChainId, _srcPoolId);\n        cp.lkb = cp.lkb.sub(_amountSD);\n\n        uint amountLD = amountSDtoLD(_amountSD);\n        _safeTransfer(token, _to, amountLD);\n        emit RedeemLocalCallback(_to, _amountSD, _amountToMintSD);\n    }\n\n    // Local                                    Remote\n    // -------                                  ---------\n    // redeemLocal(amount)   ->               redeemLocalCheckOnRemote\n    // redeemLocalCallback             <-\n    function redeemLocalCheckOnRemote(\n        uint16 _srcChainId,\n        uint _srcPoolId,\n        uint _amountSD\n    ) external nonReentrant onlyRouter returns (uint swapAmount, uint mintAmount) {\n        ChainPath storage cp = getAndCheckCP(_srcChainId, _srcPoolId);\n        if (_amountSD > cp.balance) {\n            mintAmount = _amountSD - cp.balance;\n            swapAmount = cp.balance;\n            cp.balance = 0;\n        } else {\n            cp.balance = cp.balance.sub(_amountSD);\n            swapAmount = _amountSD;\n            mintAmount = 0;\n        }\n        emit WithdrawRemote(_srcChainId, _srcPoolId, swapAmount, mintAmount);\n    }\n\n    //---------------------------------------------------------------------------\n    // DAO Calls\n    function createChainPath(\n        uint16 _dstChainId,\n        uint _dstPoolId,\n        uint _weight\n    ) external onlyRouter {\n        for (uint i = 0; i < chainPaths.length; ++i) {\n            ChainPath memory cp = chainPaths[i];\n            bool exists = cp.dstChainId == _dstChainId && cp.dstPoolId == _dstPoolId;\n            require(!exists, \"Stargate: cant createChainPath of existing dstChainId and _dstPoolId\");\n        }\n        totalWeight = totalWeight.add(_weight);\n        chainPathIndexLookup[_dstChainId][_dstPoolId] = chainPaths.length;\n        chainPaths.push(ChainPath(false, _dstChainId, _dstPoolId, _weight, 0, 0, 0, 0));\n        emit ChainPathUpdate(_dstChainId, _dstPoolId, _weight);\n    }\n\n    function setWeightForChainPath(\n        uint16 _dstChainId,\n        uint _dstPoolId,\n        uint16 _weight\n    ) external onlyRouter {\n        ChainPath storage cp = getAndCheckCP(_dstChainId, _dstPoolId);\n        totalWeight = totalWeight.sub(cp.weight).add(_weight);\n        cp.weight = _weight;\n        emit ChainPathUpdate(_dstChainId, _dstPoolId, _weight);\n    }\n\n    function setFee(uint _mintFeeBP) external onlyRouter {\n        require(_mintFeeBP <= BP_DENOMINATOR, \"Bridge: cum fees > 100%\");\n        mintFeeBP = _mintFeeBP;\n        emit FeesUpdated(mintFeeBP);\n    }\n\n    function setFeeLibrary(address _feeLibraryAddr) external onlyRouter {\n        require(_feeLibraryAddr != address(0x0), \"Stargate: fee library cant be 0x0\");\n        feeLibrary = _feeLibraryAddr;\n        emit FeeLibraryUpdated(_feeLibraryAddr);\n    }\n\n    function setSwapStop(bool _swapStop) external onlyRouter {\n        stopSwap = _swapStop;\n        emit StopSwapUpdated(_swapStop);\n    }\n\n    function setDeltaParam(\n        bool _batched,\n        uint _swapDeltaBP,\n        uint _lpDeltaBP,\n        bool _defaultSwapMode,\n        bool _defaultLPMode\n    ) external onlyRouter {\n        require(_swapDeltaBP <= BP_DENOMINATOR && _lpDeltaBP <= BP_DENOMINATOR, \"Stargate: wrong Delta param\");\n        batched = _batched;\n        swapDeltaBP = _swapDeltaBP;\n        lpDeltaBP = _lpDeltaBP;\n        defaultSwapMode = _defaultSwapMode;\n        defaultLPMode = _defaultLPMode;\n        emit DeltaParamUpdated(_batched, _swapDeltaBP, _lpDeltaBP, _defaultSwapMode, _defaultLPMode);\n    }\n\n    function callDelta(bool _fullMode) external onlyRouter {\n        _delta(_fullMode);\n    }\n\n    function activateChainPath(uint16 _dstChainId, uint _dstPoolId) external onlyRouter {\n        ChainPath storage cp = getAndCheckCP(_dstChainId, _dstPoolId);\n        require(cp.ready == false, \"Stargate: chainPath is already active\");\n        // this func will only be called once\n        cp.ready = true;\n    }\n\n    function withdrawProtocolFeeBalance(address _to) external onlyRouter {\n        if (protocolFeeBalance > 0) {\n            uint amountOfLD = amountSDtoLD(protocolFeeBalance);\n            protocolFeeBalance = 0;\n            _safeTransfer(token, _to, amountOfLD);\n            emit WithdrawProtocolFeeBalance(_to, amountOfLD);\n        }\n    }\n\n    function withdrawMintFeeBalance(address _to) external onlyRouter {\n        if (mintFeeBalance > 0) {\n            uint amountOfLD = amountSDtoLD(mintFeeBalance);\n            mintFeeBalance = 0;\n            _safeTransfer(token, _to, amountOfLD);\n            emit WithdrawMintFeeBalance(_to, amountOfLD);\n        }\n    }\n\n    //---------------------------------------------------------------------------\n    // INTERNAL\n    // Conversion Helpers\n    //---------------------------------------------------------------------------\n    function amountLPtoLD(uint _amountLP) external view returns (uint) {\n        return amountSDtoLD(_amountLPtoSD(_amountLP));\n    }\n\n    function _amountLPtoSD(uint _amountLP) internal view returns (uint) {\n        require(totalSupply > 0, \"Stargate: cant convert LPtoSD when totalSupply == 0\");\n        return _amountLP.mul(totalLiquidity).div(totalSupply);\n    }\n\n    function _amountSDtoLP(uint _amountSD) internal view returns (uint) {\n        require(totalLiquidity > 0, \"Stargate: cant convert SDtoLP when totalLiq == 0\");\n        return _amountSD.mul(totalSupply).div(totalLiquidity);\n    }\n\n    function amountSDtoLD(uint _amount) internal view returns (uint) {\n        return _amount.mul(convertRate);\n    }\n\n    function amountLDtoSD(uint _amount) internal view returns (uint) {\n        return _amount.div(convertRate);\n    }\n\n    function getAndCheckCP(uint16 _dstChainId, uint _dstPoolId) internal view returns (ChainPath storage) {\n        require(chainPaths.length > 0, \"Stargate: no chainpaths exist\");\n        ChainPath storage cp = chainPaths[chainPathIndexLookup[_dstChainId][_dstPoolId]];\n        require(cp.dstChainId == _dstChainId && cp.dstPoolId == _dstPoolId, \"Stargate: local chainPath does not exist\");\n        return cp;\n    }\n\n    function getChainPath(uint16 _dstChainId, uint _dstPoolId) external view returns (ChainPath memory) {\n        ChainPath memory cp = chainPaths[chainPathIndexLookup[_dstChainId][_dstPoolId]];\n        require(cp.dstChainId == _dstChainId && cp.dstPoolId == _dstPoolId, \"Stargate: local chainPath does not exist\");\n        return cp;\n    }\n\n    function _burnLocal(address _from, uint _amountLP) internal returns (uint) {\n        require(totalSupply > 0, \"Stargate: cant burn when totalSupply == 0\");\n        uint amountOfLPTokens = balanceOf[_from];\n        require(amountOfLPTokens >= _amountLP, \"Stargate: not enough LP tokens to burn\");\n\n        uint amountSD = _amountLP.mul(totalLiquidity).div(totalSupply);\n        //subtract totalLiquidity accordingly\n        totalLiquidity = totalLiquidity.sub(amountSD);\n\n        _burn(_from, _amountLP);\n        emit Burn(_from, _amountLP, amountSD);\n        return amountSD;\n    }\n\n    function _delta(bool fullMode) internal {\n        if (deltaCredit > 0 && totalWeight > 0) {\n            uint cpLength = chainPaths.length;\n            uint[] memory deficit = new uint[](cpLength);\n            uint totalDeficit = 0;\n\n            // algorithm steps 6-9: calculate the total and the amounts required to get to balance state\n            for (uint i = 0; i < cpLength; ++i) {\n                ChainPath storage cp = chainPaths[i];\n                // (liquidity * (weight/totalWeight)) - (lkb+credits)\n                uint balLiq = totalLiquidity.mul(cp.weight).div(totalWeight);\n                uint currLiq = cp.lkb.add(cp.credits);\n                if (balLiq > currLiq) {\n                    // save gas since we know balLiq > currLiq and we know deficit[i] > 0\n                    deficit[i] = balLiq - currLiq;\n                    totalDeficit = totalDeficit.add(deficit[i]);\n                }\n            }\n\n            // indicates how much delta credit is distributed\n            uint spent;\n\n            // handle credits with 2 tranches. the [ < totalDeficit] [excessCredit]\n            // run full Delta, allocate all credits\n            if (totalDeficit == 0) {\n                // only fullMode delta will allocate excess credits\n                if (fullMode && deltaCredit > 0) {\n                    // credit ChainPath by weights\n                    for (uint i = 0; i < cpLength; ++i) {\n                        ChainPath storage cp = chainPaths[i];\n                        // credits = credits + toBalanceChange + remaining allocation based on weight\n                        uint amtToCredit = deltaCredit.mul(cp.weight).div(totalWeight);\n                        spent = spent.add(amtToCredit);\n                        cp.credits = cp.credits.add(amtToCredit);\n                    }\n                } // else do nth\n            } else if (totalDeficit <= deltaCredit) {\n                if (fullMode) {\n                    // algorithm step 13: calculate amount to disperse to bring to balance state or as close as possible\n                    uint excessCredit = deltaCredit - totalDeficit;\n                    // algorithm steps 14-16: calculate credits\n                    for (uint i = 0; i < cpLength; ++i) {\n                        if (deficit[i] > 0) {\n                            ChainPath storage cp = chainPaths[i];\n                            // credits = credits + deficit + remaining allocation based on weight\n                            uint amtToCredit = deficit[i].add(excessCredit.mul(cp.weight).div(totalWeight));\n                            spent = spent.add(amtToCredit);\n                            cp.credits = cp.credits.add(amtToCredit);\n                        }\n                    }\n                } else {\n                    // totalDeficit <= deltaCredit but not running fullMode\n                    // credit chainPaths as is if any deficit, not using all deltaCredit\n                    for (uint i = 0; i < cpLength; ++i) {\n                        if (deficit[i] > 0) {\n                            ChainPath storage cp = chainPaths[i];\n                            uint amtToCredit = deficit[i];\n                            spent = spent.add(amtToCredit);\n                            cp.credits = cp.credits.add(amtToCredit);\n                        }\n                    }\n                }\n            } else {\n                // totalDeficit > deltaCredit, fullMode or not, normalize the deficit by deltaCredit\n                for (uint i = 0; i < cpLength; ++i) {\n                    if (deficit[i] > 0) {\n                        ChainPath storage cp = chainPaths[i];\n                        uint proportionalDeficit = deficit[i].mul(deltaCredit).div(totalDeficit);\n                        spent = spent.add(proportionalDeficit);\n                        cp.credits = cp.credits.add(proportionalDeficit);\n                    }\n                }\n            }\n\n            // deduct the amount of credit sent\n            deltaCredit = deltaCredit.sub(spent);\n        }\n    }\n\n    function _mintLocal(\n        address _to,\n        uint _amountLD,\n        bool _feesEnabled,\n        bool _creditDelta\n    ) internal returns (uint amountSD) {\n        require(totalWeight > 0, \"Stargate: No ChainPaths exist\");\n        amountSD = amountLDtoSD(_amountLD);\n\n        uint mintFeeSD = 0;\n        if (_feesEnabled) {\n            mintFeeSD = amountSD.mul(mintFeeBP).div(BP_DENOMINATOR);\n            amountSD = amountSD.sub(mintFeeSD);\n            mintFeeBalance = mintFeeBalance.add(mintFeeSD);\n        }\n\n        if (_creditDelta) {\n            deltaCredit = deltaCredit.add(amountSD);\n        }\n\n        uint amountLPTokens = amountSD;\n        if (totalSupply != 0) {\n            amountLPTokens = amountSD.mul(totalSupply).div(totalLiquidity);\n        }\n        totalLiquidity = totalLiquidity.add(amountSD);\n\n        _mint(_to, amountLPTokens);\n        emit Mint(_to, amountLPTokens, amountSD, mintFeeSD);\n\n        // add to credits and call delta. short circuit to save gas\n        if (!batched || deltaCredit > totalLiquidity.mul(lpDeltaBP).div(BP_DENOMINATOR)) {\n            _delta(defaultLPMode);\n        }\n    }\n\n    function _safeTransfer(\n        address _token,\n        address _to,\n        uint _value\n    ) private {\n        (bool success, bytes memory data) = _token.call(abi.encodeWithSelector(SELECTOR, _to, _value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \"Stargate: TRANSFER_FAILED\");\n    }\n}\n"
    },
    "contracts/mocks/StargateRouterMock.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\npragma abicoder v2;\n\n// imports\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"./StargateFactoryMock.sol\";\nimport \"./StargatePoolMock.sol\";\nimport \"./StargateBridgeMock.sol\";\n\n// interfaces\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"../interfaces/IStargateRouter.sol\";\nimport \"../interfaces/IStargateReceiver.sol\";\n\n// libraries\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\n\ncontract StargateRouterMock is IStargateRouter, Ownable, ReentrancyGuard {\n    using SafeMath for uint;\n\n    //---------------------------------------------------------------------------\n    // CONSTANTS\n    uint8 internal constant TYPE_REDEEM_LOCAL_RESPONSE = 1;\n    uint8 internal constant TYPE_REDEEM_LOCAL_CALLBACK_RETRY = 2;\n    uint8 internal constant TYPE_SWAP_REMOTE_RETRY = 3;\n\n    //---------------------------------------------------------------------------\n    // STRUCTS\n    struct CachedSwap {\n        address token;\n        uint amountLD;\n        address to;\n        bytes payload;\n    }\n\n    //---------------------------------------------------------------------------\n    // VARIABLES\n    StargateFactoryMock public factory; // used for creating pools\n    address public protocolFeeOwner; // can call methods to pull Stargate fees collected in pools\n    address public mintFeeOwner; // can call methods to pull mint fees collected in pools\n    StargateBridgeMock public bridge;\n    mapping(uint16 => mapping(bytes => mapping(uint => bytes))) public revertLookup; //[chainId][srcAddress][nonce]\n    mapping(uint16 => mapping(bytes => mapping(uint => CachedSwap))) public cachedSwapLookup; //[chainId][srcAddress][nonce]\n\n    //---------------------------------------------------------------------------\n    // EVENTS\n    event Revert(uint8 bridgeFunctionType, uint16 chainId, bytes srcAddress, uint nonce);\n    event CachedSwapSaved(uint16 chainId, bytes srcAddress, uint nonce, address token, uint amountLD, address to, bytes payload, bytes reason);\n    event RevertRedeemLocal(uint16 srcChainId, uint _srcPoolId, uint _dstPoolId, bytes to, uint redeemAmountSD, uint mintAmountSD, uint indexed nonce, bytes indexed srcAddress);\n    event RedeemLocalCallback(uint16 srcChainId, bytes indexed srcAddress, uint indexed nonce, uint srcPoolId, uint dstPoolId, address to, uint amountSD, uint mintAmountSD);\n\n    //---------------------------------------------------------------------------\n    // MODIFIERS\n    modifier onlyBridge() {\n        require(msg.sender == address(bridge), \"Bridge: caller must be Bridge.\");\n        _;\n    }\n\n    constructor() {}\n\n    function setBridgeAndFactory(StargateBridgeMock _bridge, StargateFactoryMock _factory) external onlyOwner {\n        require(address(bridge) == address(0x0) && address(factory) == address(0x0), \"Stargate: bridge and factory already initialized\"); // 1 time only\n        require(address(_bridge) != address(0x0), \"Stargate: bridge cant be 0x0\");\n        require(address(_factory) != address(0x0), \"Stargate: factory cant be 0x0\");\n\n        bridge = _bridge;\n        factory = _factory;\n    }\n\n    //---------------------------------------------------------------------------\n    // VIEWS\n    function _getPool(uint _poolId) internal view returns (StargatePoolMock pool) {\n        pool = factory.getPool(_poolId);\n        require(address(pool) != address(0x0), \"Stargate: Pool does not exist\");\n    }\n\n    //---------------------------------------------------------------------------\n    // INTERNAL\n    function _safeTransferFrom(\n        address token,\n        address from,\n        address to,\n        uint value\n    ) private {\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \"Stargate: TRANSFER_FROM_FAILED\");\n    }\n\n    function swap(\n        uint16 _dstChainId,\n        uint _srcPoolId,\n        uint _dstPoolId,\n        address payable _refundAddress,\n        uint _amountLD,\n        uint _minAmountLD,\n        lzTxObj memory _lzTxParams,\n        bytes calldata _to,\n        bytes calldata _payload\n    ) external payable nonReentrant {\n        require(_amountLD > 0, \"Stargate: cannot swap 0\");\n        require(_refundAddress != address(0x0), \"Stargate: _refundAddress cannot be 0x0\");\n        StargatePoolMock.SwapObj memory s;\n        StargatePoolMock.CreditObj memory c;\n        {\n            StargatePoolMock pool = _getPool(_srcPoolId);\n            {\n                uint convertRate = pool.convertRate();\n                _amountLD = _amountLD.div(convertRate).mul(convertRate);\n            }\n\n            s = pool.swap(_dstChainId, _dstPoolId, msg.sender, _amountLD, _minAmountLD, true);\n            _safeTransferFrom(pool.token(), msg.sender, address(pool), _amountLD);\n            c = pool.sendCredits(_dstChainId, _dstPoolId);\n        }\n        bridge.swap{value: msg.value}(_dstChainId, _srcPoolId, _dstPoolId, _refundAddress, c, s, _lzTxParams, _to, _payload);\n    }\n\n    function redeemRemote(\n        uint16 _dstChainId,\n        uint _srcPoolId,\n        uint _dstPoolId,\n        address payable _refundAddress,\n        uint _amountLP,\n        uint _minAmountLD,\n        bytes calldata _to,\n        lzTxObj memory _lzTxParams\n    ) external payable nonReentrant {\n        require(_refundAddress != address(0x0), \"Stargate: _refundAddress cannot be 0x0\");\n        require(_amountLP > 0, \"Stargate: not enough lp to redeemRemote\");\n        StargatePoolMock.SwapObj memory s;\n        StargatePoolMock.CreditObj memory c;\n        {\n            StargatePoolMock pool = _getPool(_srcPoolId);\n            uint amountLD = pool.amountLPtoLD(_amountLP);\n            // perform a swap with no liquidity\n            s = pool.swap(_dstChainId, _dstPoolId, msg.sender, amountLD, _minAmountLD, false);\n            pool.redeemRemote(_dstChainId, _dstPoolId, msg.sender, _amountLP);\n            c = pool.sendCredits(_dstChainId, _dstPoolId);\n        }\n        // equal to a swap, with no payload (\"0x\") no dstGasForCall 0\n        bridge.swap{value: msg.value}(_dstChainId, _srcPoolId, _dstPoolId, _refundAddress, c, s, _lzTxParams, _to, \"\");\n    }\n\n    function instantRedeemLocal(\n        uint16 _srcPoolId,\n        uint _amountLP,\n        address _to\n    ) external nonReentrant returns (uint amountSD) {\n        require(_amountLP > 0, \"Stargate: not enough lp to redeem\");\n        StargatePoolMock pool = _getPool(_srcPoolId);\n        amountSD = pool.instantRedeemLocal(msg.sender, _amountLP, _to);\n    }\n\n    function redeemLocal(\n        uint16 _dstChainId,\n        uint _srcPoolId,\n        uint _dstPoolId,\n        address payable _refundAddress,\n        uint _amountLP,\n        bytes calldata _to,\n        lzTxObj memory _lzTxParams\n    ) external payable nonReentrant {\n        require(_refundAddress != address(0x0), \"Stargate: _refundAddress cannot be 0x0\");\n        StargatePoolMock pool = _getPool(_srcPoolId);\n        require(_amountLP > 0, \"Stargate: not enough lp to redeem\");\n        uint amountSD = pool.redeemLocal(msg.sender, _amountLP, _dstChainId, _dstPoolId, _to);\n        require(amountSD > 0, \"Stargate: not enough lp to redeem with amountSD\");\n\n        StargatePoolMock.CreditObj memory c = pool.sendCredits(_dstChainId, _dstPoolId);\n        bridge.redeemLocal{value: msg.value}(_dstChainId, _srcPoolId, _dstPoolId, _refundAddress, c, amountSD, _to, _lzTxParams);\n    }\n\n    function sendCredits(\n        uint16 _dstChainId,\n        uint _srcPoolId,\n        uint _dstPoolId,\n        address payable _refundAddress\n    ) external payable nonReentrant {\n        require(_refundAddress != address(0x0), \"Stargate: _refundAddress cannot be 0x0\");\n        StargatePoolMock pool = _getPool(_srcPoolId);\n        StargatePoolMock.CreditObj memory c = pool.sendCredits(_dstChainId, _dstPoolId);\n        bridge.sendCredits{value: msg.value}(_dstChainId, _srcPoolId, _dstPoolId, _refundAddress, c);\n    }\n\n    function quoteLayerZeroFee(\n        uint16 _dstChainId,\n        uint8 _functionType,\n        bytes calldata _toAddress,\n        bytes calldata _transferAndCallPayload,\n        StargateRouterMock.lzTxObj memory _lzTxParams\n    ) external view returns (uint, uint) {\n        return bridge.quoteLayerZeroFee(_dstChainId, _functionType, _toAddress, _transferAndCallPayload, _lzTxParams);\n    }\n\n    function revertRedeemLocal(\n        uint16 _dstChainId,\n        bytes calldata _srcAddress,\n        uint _nonce,\n        address payable _refundAddress,\n        lzTxObj memory _lzTxParams\n    ) external payable {\n        require(_refundAddress != address(0x0), \"Stargate: _refundAddress cannot be 0x0\");\n        bytes memory payload = revertLookup[_dstChainId][_srcAddress][_nonce];\n        require(payload.length > 0, \"Stargate: no retry revert\");\n        {\n            uint8 functionType;\n            assembly {\n                functionType := mload(add(payload, 32))\n            }\n            require(functionType == TYPE_REDEEM_LOCAL_RESPONSE, \"Stargate: invalid function type\");\n        }\n\n        // empty it\n        revertLookup[_dstChainId][_srcAddress][_nonce] = \"\";\n\n        uint srcPoolId;\n        uint dstPoolId;\n        assembly {\n            srcPoolId := mload(add(payload, 64))\n            dstPoolId := mload(add(payload, 96))\n        }\n\n        StargatePoolMock.CreditObj memory c;\n        {\n            StargatePoolMock pool = _getPool(dstPoolId);\n            c = pool.sendCredits(_dstChainId, srcPoolId);\n        }\n\n        bridge.redeemLocalCallback{value: msg.value}(_dstChainId, _refundAddress, c, _lzTxParams, payload);\n    }\n\n    function retryRevert(\n        uint16 _srcChainId,\n        bytes calldata _srcAddress,\n        uint _nonce\n    ) external payable {\n        bytes memory payload = revertLookup[_srcChainId][_srcAddress][_nonce];\n        require(payload.length > 0, \"Stargate: no retry revert\");\n\n        // empty it\n        revertLookup[_srcChainId][_srcAddress][_nonce] = \"\";\n\n        uint8 functionType;\n        assembly {\n            functionType := mload(add(payload, 32))\n        }\n\n        if (functionType == TYPE_REDEEM_LOCAL_CALLBACK_RETRY) {\n            (, uint srcPoolId, uint dstPoolId, address to, uint amountSD, uint mintAmountSD) = abi.decode(payload, (uint8, uint, uint, address, uint, uint));\n            _redeemLocalCallback(_srcChainId, _srcAddress, _nonce, srcPoolId, dstPoolId, to, amountSD, mintAmountSD);\n        }\n        // for retrying the swapRemote. if it fails again, retry\n        else if (functionType == TYPE_SWAP_REMOTE_RETRY) {\n            (, uint srcPoolId, uint dstPoolId, uint dstGasForCall, address to, StargatePoolMock.SwapObj memory s, bytes memory p) = abi.decode(payload, (uint8, uint, uint, uint, address, StargatePoolMock.SwapObj, bytes));\n            _swapRemote(_srcChainId, _srcAddress, _nonce, srcPoolId, dstPoolId, dstGasForCall, to, s, p);\n        } else {\n            revert(\"Stargate: invalid function type\");\n        }\n    }\n\n    function clearCachedSwap(\n        uint16 _srcChainId,\n        bytes calldata _srcAddress,\n        uint _nonce\n    ) external {\n        CachedSwap memory cs = cachedSwapLookup[_srcChainId][_srcAddress][_nonce];\n        require(cs.to != address(0x0), \"Stargate: cache already cleared\");\n        // clear the data\n        cachedSwapLookup[_srcChainId][_srcAddress][_nonce] = CachedSwap(address(0x0), 0, address(0x0), \"\");\n        IStargateReceiver(cs.to).sgReceive(_srcChainId, _srcAddress, _nonce, cs.token, cs.amountLD, cs.payload);\n    }\n\n    function creditChainPath(\n        uint16 _dstChainId,\n        uint _dstPoolId,\n        uint _srcPoolId,\n        StargatePoolMock.CreditObj memory _c\n    ) external onlyBridge {\n        StargatePoolMock pool = _getPool(_srcPoolId);\n        pool.creditChainPath(_dstChainId, _dstPoolId, _c);\n    }\n\n    //---------------------------------------------------------------------------\n    // REMOTE CHAIN FUNCTIONS\n    function redeemLocalCheckOnRemote(\n        uint16 _srcChainId,\n        bytes memory _srcAddress,\n        uint _nonce,\n        uint _srcPoolId,\n        uint _dstPoolId,\n        uint _amountSD,\n        bytes calldata _to\n    ) external onlyBridge {\n        StargatePoolMock pool = _getPool(_dstPoolId);\n        try pool.redeemLocalCheckOnRemote(_srcChainId, _srcPoolId, _amountSD) returns (uint redeemAmountSD, uint mintAmountSD) {\n            revertLookup[_srcChainId][_srcAddress][_nonce] = abi.encode(TYPE_REDEEM_LOCAL_RESPONSE, _srcPoolId, _dstPoolId, redeemAmountSD, mintAmountSD, _to);\n            emit RevertRedeemLocal(_srcChainId, _srcPoolId, _dstPoolId, _to, redeemAmountSD, mintAmountSD, _nonce, _srcAddress);\n        } catch {\n            // if the func fail, return [swapAmount: 0, mintAMount: _amountSD]\n            // swapAmount represents the amount of chainPath balance deducted on the remote side, which because the above tx failed, should be 0\n            // mintAmount is the full amount of tokens the user attempted to redeem on the src side, which gets converted back into the lp amount\n            revertLookup[_srcChainId][_srcAddress][_nonce] = abi.encode(TYPE_REDEEM_LOCAL_RESPONSE, _srcPoolId, _dstPoolId, 0, _amountSD, _to);\n            emit Revert(TYPE_REDEEM_LOCAL_RESPONSE, _srcChainId, _srcAddress, _nonce);\n        }\n    }\n\n    function redeemLocalCallback(\n        uint16 _srcChainId,\n        bytes memory _srcAddress,\n        uint _nonce,\n        uint _srcPoolId,\n        uint _dstPoolId,\n        address _to,\n        uint _amountSD,\n        uint _mintAmountSD\n    ) external onlyBridge {\n        _redeemLocalCallback(_srcChainId, _srcAddress, _nonce, _srcPoolId, _dstPoolId, _to, _amountSD, _mintAmountSD);\n    }\n\n    function _redeemLocalCallback(\n        uint16 _srcChainId,\n        bytes memory _srcAddress,\n        uint _nonce,\n        uint _srcPoolId,\n        uint _dstPoolId,\n        address _to,\n        uint _amountSD,\n        uint _mintAmountSD\n    ) internal {\n        StargatePoolMock pool = _getPool(_dstPoolId);\n        try pool.redeemLocalCallback(_srcChainId, _srcPoolId, _to, _amountSD, _mintAmountSD) {} catch {\n            revertLookup[_srcChainId][_srcAddress][_nonce] = abi.encode(TYPE_REDEEM_LOCAL_CALLBACK_RETRY, _srcPoolId, _dstPoolId, _to, _amountSD, _mintAmountSD);\n            emit Revert(TYPE_REDEEM_LOCAL_CALLBACK_RETRY, _srcChainId, _srcAddress, _nonce);\n        }\n        emit RedeemLocalCallback(_srcChainId, _srcAddress, _nonce, _srcPoolId, _dstPoolId, _to, _amountSD, _mintAmountSD);\n    }\n\n    function swapRemote(\n        uint16 _srcChainId,\n        bytes memory _srcAddress,\n        uint _nonce,\n        uint _srcPoolId,\n        uint _dstPoolId,\n        uint _dstGasForCall,\n        address _to,\n        StargatePoolMock.SwapObj memory _s,\n        bytes memory _payload\n    ) external onlyBridge {\n        _swapRemote(_srcChainId, _srcAddress, _nonce, _srcPoolId, _dstPoolId, _dstGasForCall, _to, _s, _payload);\n    }\n\n    function _swapRemote(\n        uint16 _srcChainId,\n        bytes memory _srcAddress,\n        uint _nonce,\n        uint _srcPoolId,\n        uint _dstPoolId,\n        uint _dstGasForCall,\n        address _to,\n        StargatePoolMock.SwapObj memory _s,\n        bytes memory _payload\n    ) internal {\n        StargatePoolMock pool = _getPool(_dstPoolId);\n        // first try catch the swap remote\n        try pool.swapRemote(_srcChainId, _srcPoolId, _to, _s) returns (uint amountLD) {\n            if (_payload.length > 0) {\n                // then try catch the external contract call\n                try IStargateReceiver(_to).sgReceive{gas: _dstGasForCall}(_srcChainId, _srcAddress, _nonce, pool.token(), amountLD, _payload) {\n                    // do nothing\n                } catch (bytes memory reason) {\n                    cachedSwapLookup[_srcChainId][_srcAddress][_nonce] = CachedSwap(pool.token(), amountLD, _to, _payload);\n                    emit CachedSwapSaved(_srcChainId, _srcAddress, _nonce, pool.token(), amountLD, _to, _payload, reason);\n                }\n            }\n        } catch {\n            revertLookup[_srcChainId][_srcAddress][_nonce] = abi.encode(TYPE_SWAP_REMOTE_RETRY, _srcPoolId, _dstPoolId, _dstGasForCall, _to, _s, _payload);\n            emit Revert(TYPE_SWAP_REMOTE_RETRY, _srcChainId, _srcAddress, _nonce);\n        }\n    }\n\n    //---------------------------------------------------------------------------\n    // DAO Calls\n    function createPool(\n        uint _poolId,\n        address _token,\n        uint8 _sharedDecimals,\n        uint8 _localDecimals,\n        string memory _name,\n        string memory _symbol\n    ) external onlyOwner returns (address) {\n        require(_token != address(0x0), \"Stargate: _token cannot be 0x0\");\n        return factory.createPool(_poolId, _token, _sharedDecimals, _localDecimals, _name, _symbol);\n    }\n\n    function createChainPath(\n        uint _poolId,\n        uint16 _dstChainId,\n        uint _dstPoolId,\n        uint _weight\n    ) external onlyOwner {\n        StargatePoolMock pool = _getPool(_poolId);\n        pool.createChainPath(_dstChainId, _dstPoolId, _weight);\n    }\n\n    function activateChainPath(\n        uint _poolId,\n        uint16 _dstChainId,\n        uint _dstPoolId\n    ) external onlyOwner {\n        StargatePoolMock pool = _getPool(_poolId);\n        pool.activateChainPath(_dstChainId, _dstPoolId);\n    }\n\n    function setWeightForChainPath(\n        uint _poolId,\n        uint16 _dstChainId,\n        uint _dstPoolId,\n        uint16 _weight\n    ) external onlyOwner {\n        StargatePoolMock pool = _getPool(_poolId);\n        pool.setWeightForChainPath(_dstChainId, _dstPoolId, _weight);\n    }\n\n    function setProtocolFeeOwner(address _owner) external onlyOwner {\n        require(_owner != address(0x0), \"Stargate: _owner cannot be 0x0\");\n        protocolFeeOwner = _owner;\n    }\n\n    function setMintFeeOwner(address _owner) external onlyOwner {\n        require(_owner != address(0x0), \"Stargate: _owner cannot be 0x0\");\n        mintFeeOwner = _owner;\n    }\n\n    function setFees(uint _poolId, uint _mintFeeBP) external onlyOwner {\n        StargatePoolMock pool = _getPool(_poolId);\n        pool.setFee(_mintFeeBP);\n    }\n\n    function setFeeLibrary(uint _poolId, address _feeLibraryAddr) external onlyOwner {\n        StargatePoolMock pool = _getPool(_poolId);\n        pool.setFeeLibrary(_feeLibraryAddr);\n    }\n\n    function setSwapStop(uint _poolId, bool _swapStop) external onlyOwner {\n        StargatePoolMock pool = _getPool(_poolId);\n        pool.setSwapStop(_swapStop);\n    }\n\n    function setDeltaParam(\n        uint _poolId,\n        bool _batched,\n        uint _swapDeltaBP,\n        uint _lpDeltaBP,\n        bool _defaultSwapMode,\n        bool _defaultLPMode\n    ) external onlyOwner {\n        StargatePoolMock pool = _getPool(_poolId);\n        pool.setDeltaParam(_batched, _swapDeltaBP, _lpDeltaBP, _defaultSwapMode, _defaultLPMode);\n    }\n\n    function callDelta(uint _poolId, bool _fullMode) external {\n        StargatePoolMock pool = _getPool(_poolId);\n        pool.callDelta(_fullMode);\n    }\n\n    function withdrawMintFee(uint _poolId, address _to) external {\n        require(mintFeeOwner == msg.sender, \"Stargate: only mintFeeOwner\");\n        StargatePoolMock pool = _getPool(_poolId);\n        pool.withdrawMintFeeBalance(_to);\n    }\n\n    function withdrawProtocolFee(uint _poolId, address _to) external {\n        require(protocolFeeOwner == msg.sender, \"Stargate: only protocolFeeOwner\");\n        StargatePoolMock pool = _getPool(_poolId);\n        pool.withdrawProtocolFeeBalance(_to);\n    }\n}\n"
    },
    "contracts/NonblockingLzApp.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./LzApp.sol\";\nimport \"./utils/ExcessivelySafeCall.sol\";\n\n/*\n * the default LayerZero messaging behaviour is blocking, i.e. any failed message will block the channel\n * this abstract class try-catch all fail messages and store locally for future retry. hence, non-blocking\n * NOTE: if the srcAddress is not configured properly, it will still block the message pathway from (srcChainId, srcAddress)\n */\nabstract contract NonblockingLzApp is LzApp {\n    using ExcessivelySafeCall for address;\n\n    constructor(address _endpoint) LzApp(_endpoint) {}\n\n    mapping(uint16 => mapping(bytes => mapping(uint64 => bytes32)))\n        public failedMessages;\n\n    event MessageFailed(\n        uint16 _srcChainId,\n        bytes _srcAddress,\n        uint64 _nonce,\n        bytes _payload,\n        bytes _reason\n    );\n    event RetryMessageSuccess(\n        uint16 _srcChainId,\n        bytes _srcAddress,\n        uint64 _nonce,\n        bytes32 _payloadHash\n    );\n\n    // overriding the virtual function in LzReceiver\n    function _blockingLzReceive(\n        uint16 _srcChainId,\n        bytes memory _srcAddress,\n        uint64 _nonce,\n        bytes memory _payload\n    ) internal virtual override {\n        (bool success, bytes memory reason) = address(this).excessivelySafeCall(\n            gasleft(),\n            150,\n            abi.encodeWithSelector(\n                this.nonblockingLzReceive.selector,\n                _srcChainId,\n                _srcAddress,\n                _nonce,\n                _payload\n            )\n        );\n        // try-catch all errors/exceptions\n        if (!success) {\n            failedMessages[_srcChainId][_srcAddress][_nonce] = keccak256(\n                _payload\n            );\n            emit MessageFailed(\n                _srcChainId,\n                _srcAddress,\n                _nonce,\n                _payload,\n                reason\n            );\n        }\n    }\n\n    function nonblockingLzReceive(\n        uint16 _srcChainId,\n        bytes calldata _srcAddress,\n        uint64 _nonce,\n        bytes calldata _payload\n    ) public virtual {\n        // only internal transaction\n        require(\n            _msgSender() == address(this),\n            \"NonblockingLzApp: caller must be LzApp\"\n        );\n        _nonblockingLzReceive(_srcChainId, _srcAddress, _nonce, _payload);\n    }\n\n    //@notice override this function\n    function _nonblockingLzReceive(\n        uint16 _srcChainId,\n        bytes memory _srcAddress,\n        uint64 _nonce,\n        bytes memory _payload\n    ) internal virtual;\n\n    function retryMessage(\n        uint16 _srcChainId,\n        bytes calldata _srcAddress,\n        uint64 _nonce,\n        bytes calldata _payload\n    ) public payable virtual {\n        // assert there is message to retry\n        bytes32 payloadHash = failedMessages[_srcChainId][_srcAddress][_nonce];\n        require(\n            payloadHash != bytes32(0),\n            \"NonblockingLzApp: no stored message\"\n        );\n        require(\n            keccak256(_payload) == payloadHash,\n            \"NonblockingLzApp: invalid payload\"\n        );\n        // clear the stored message\n        failedMessages[_srcChainId][_srcAddress][_nonce] = bytes32(0);\n        // execute the message. revert if it fails again\n        _nonblockingLzReceive(_srcChainId, _srcAddress, _nonce, _payload);\n        emit RetryMessageSuccess(_srcChainId, _srcAddress, _nonce, payloadHash);\n    }\n}\n"
    },
    "contracts/utils/BytesLib.sol": {
      "content": "// SPDX-License-Identifier: Unlicense\n/*\n * @title Solidity Bytes Arrays Utils\n * @author Gonçalo Sá <goncalo.sa@consensys.net>\n *\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\n */\npragma solidity >=0.8.0 <0.9.0;\n\n\nlibrary BytesLib {\n    function concat(\n        bytes memory _preBytes,\n        bytes memory _postBytes\n    )\n    internal\n    pure\n    returns (bytes memory)\n    {\n        bytes memory tempBytes;\n\n        assembly {\n        // Get a location of some free memory and store it in tempBytes as\n        // Solidity does for memory variables.\n            tempBytes := mload(0x40)\n\n        // Store the length of the first bytes array at the beginning of\n        // the memory for tempBytes.\n            let length := mload(_preBytes)\n            mstore(tempBytes, length)\n\n        // Maintain a memory counter for the current write location in the\n        // temp bytes array by adding the 32 bytes for the array length to\n        // the starting location.\n            let mc := add(tempBytes, 0x20)\n        // Stop copying when the memory counter reaches the length of the\n        // first bytes array.\n            let end := add(mc, length)\n\n            for {\n            // Initialize a copy counter to the start of the _preBytes data,\n            // 32 bytes into its memory.\n                let cc := add(_preBytes, 0x20)\n            } lt(mc, end) {\n            // Increase both counters by 32 bytes each iteration.\n                mc := add(mc, 0x20)\n                cc := add(cc, 0x20)\n            } {\n            // Write the _preBytes data into the tempBytes memory 32 bytes\n            // at a time.\n                mstore(mc, mload(cc))\n            }\n\n        // Add the length of _postBytes to the current length of tempBytes\n        // and store it as the new length in the first 32 bytes of the\n        // tempBytes memory.\n            length := mload(_postBytes)\n            mstore(tempBytes, add(length, mload(tempBytes)))\n\n        // Move the memory counter back from a multiple of 0x20 to the\n        // actual end of the _preBytes data.\n            mc := end\n        // Stop copying when the memory counter reaches the new combined\n        // length of the arrays.\n            end := add(mc, length)\n\n            for {\n                let cc := add(_postBytes, 0x20)\n            } lt(mc, end) {\n                mc := add(mc, 0x20)\n                cc := add(cc, 0x20)\n            } {\n                mstore(mc, mload(cc))\n            }\n\n        // Update the free-memory pointer by padding our last write location\n        // to 32 bytes: add 31 bytes to the end of tempBytes to move to the\n        // next 32 byte block, then round down to the nearest multiple of\n        // 32. If the sum of the length of the two arrays is zero then add\n        // one before rounding down to leave a blank 32 bytes (the length block with 0).\n            mstore(0x40, and(\n            add(add(end, iszero(add(length, mload(_preBytes)))), 31),\n            not(31) // Round down to the nearest 32 bytes.\n            ))\n        }\n\n        return tempBytes;\n    }\n\n    function concatStorage(bytes storage _preBytes, bytes memory _postBytes) internal {\n        assembly {\n        // Read the first 32 bytes of _preBytes storage, which is the length\n        // of the array. (We don't need to use the offset into the slot\n        // because arrays use the entire slot.)\n            let fslot := sload(_preBytes.slot)\n        // Arrays of 31 bytes or less have an even value in their slot,\n        // while longer arrays have an odd value. The actual length is\n        // the slot divided by two for odd values, and the lowest order\n        // byte divided by two for even values.\n        // If the slot is even, bitwise and the slot with 255 and divide by\n        // two to get the length. If the slot is odd, bitwise and the slot\n        // with -1 and divide by two.\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\n            let mlength := mload(_postBytes)\n            let newlength := add(slength, mlength)\n        // slength can contain both the length and contents of the array\n        // if length < 32 bytes so let's prepare for that\n        // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\n            switch add(lt(slength, 32), lt(newlength, 32))\n            case 2 {\n            // Since the new array still fits in the slot, we just need to\n            // update the contents of the slot.\n            // uint256(bytes_storage) = uint256(bytes_storage) + uint256(bytes_memory) + new_length\n                sstore(\n                _preBytes.slot,\n                // all the modifications to the slot are inside this\n                // next block\n                add(\n                // we can just add to the slot contents because the\n                // bytes we want to change are the LSBs\n                fslot,\n                add(\n                mul(\n                div(\n                // load the bytes from memory\n                mload(add(_postBytes, 0x20)),\n                // zero all bytes to the right\n                exp(0x100, sub(32, mlength))\n                ),\n                // and now shift left the number of bytes to\n                // leave space for the length in the slot\n                exp(0x100, sub(32, newlength))\n                ),\n                // increase length by the double of the memory\n                // bytes length\n                mul(mlength, 2)\n                )\n                )\n                )\n            }\n            case 1 {\n            // The stored value fits in the slot, but the combined value\n            // will exceed it.\n            // get the keccak hash to get the contents of the array\n                mstore(0x0, _preBytes.slot)\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\n\n            // save new length\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\n\n            // The contents of the _postBytes array start 32 bytes into\n            // the structure. Our first read should obtain the `submod`\n            // bytes that can fit into the unused space in the last word\n            // of the stored array. To get this, we read 32 bytes starting\n            // from `submod`, so the data we read overlaps with the array\n            // contents by `submod` bytes. Masking the lowest-order\n            // `submod` bytes allows us to add that value directly to the\n            // stored value.\n\n                let submod := sub(32, slength)\n                let mc := add(_postBytes, submod)\n                let end := add(_postBytes, mlength)\n                let mask := sub(exp(0x100, submod), 1)\n\n                sstore(\n                sc,\n                add(\n                and(\n                fslot,\n                0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00\n                ),\n                and(mload(mc), mask)\n                )\n                )\n\n                for {\n                    mc := add(mc, 0x20)\n                    sc := add(sc, 1)\n                } lt(mc, end) {\n                    sc := add(sc, 1)\n                    mc := add(mc, 0x20)\n                } {\n                    sstore(sc, mload(mc))\n                }\n\n                mask := exp(0x100, sub(mc, end))\n\n                sstore(sc, mul(div(mload(mc), mask), mask))\n            }\n            default {\n            // get the keccak hash to get the contents of the array\n                mstore(0x0, _preBytes.slot)\n            // Start copying to the last used word of the stored array.\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\n\n            // save new length\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\n\n            // Copy over the first `submod` bytes of the new data as in\n            // case 1 above.\n                let slengthmod := mod(slength, 32)\n                let mlengthmod := mod(mlength, 32)\n                let submod := sub(32, slengthmod)\n                let mc := add(_postBytes, submod)\n                let end := add(_postBytes, mlength)\n                let mask := sub(exp(0x100, submod), 1)\n\n                sstore(sc, add(sload(sc), and(mload(mc), mask)))\n\n                for {\n                    sc := add(sc, 1)\n                    mc := add(mc, 0x20)\n                } lt(mc, end) {\n                    sc := add(sc, 1)\n                    mc := add(mc, 0x20)\n                } {\n                    sstore(sc, mload(mc))\n                }\n\n                mask := exp(0x100, sub(mc, end))\n\n                sstore(sc, mul(div(mload(mc), mask), mask))\n            }\n        }\n    }\n\n    function slice(\n        bytes memory _bytes,\n        uint256 _start,\n        uint256 _length\n    )\n    internal\n    pure\n    returns (bytes memory)\n    {\n        require(_length + 31 >= _length, \"slice_overflow\");\n        require(_bytes.length >= _start + _length, \"slice_outOfBounds\");\n\n        bytes memory tempBytes;\n\n        assembly {\n            switch iszero(_length)\n            case 0 {\n            // Get a location of some free memory and store it in tempBytes as\n            // Solidity does for memory variables.\n                tempBytes := mload(0x40)\n\n            // The first word of the slice result is potentially a partial\n            // word read from the original array. To read it, we calculate\n            // the length of that partial word and start copying that many\n            // bytes into the array. The first word we copy will start with\n            // data we don't care about, but the last `lengthmod` bytes will\n            // land at the beginning of the contents of the new array. When\n            // we're done copying, we overwrite the full first word with\n            // the actual length of the slice.\n                let lengthmod := and(_length, 31)\n\n            // The multiplication in the next line is necessary\n            // because when slicing multiples of 32 bytes (lengthmod == 0)\n            // the following copy loop was copying the origin's length\n            // and then ending prematurely not copying everything it should.\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\n                let end := add(mc, _length)\n\n                for {\n                // The multiplication in the next line has the same exact purpose\n                // as the one above.\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\n                } lt(mc, end) {\n                    mc := add(mc, 0x20)\n                    cc := add(cc, 0x20)\n                } {\n                    mstore(mc, mload(cc))\n                }\n\n                mstore(tempBytes, _length)\n\n            //update free-memory pointer\n            //allocating the array padded to 32 bytes like the compiler does now\n                mstore(0x40, and(add(mc, 31), not(31)))\n            }\n            //if we want a zero-length slice let's just return a zero-length array\n            default {\n                tempBytes := mload(0x40)\n            //zero out the 32 bytes slice we are about to return\n            //we need to do it because Solidity does not garbage collect\n                mstore(tempBytes, 0)\n\n                mstore(0x40, add(tempBytes, 0x20))\n            }\n        }\n\n        return tempBytes;\n    }\n\n    function toAddress(bytes memory _bytes, uint256 _start) internal pure returns (address) {\n        require(_bytes.length >= _start + 20, \"toAddress_outOfBounds\");\n        address tempAddress;\n\n        assembly {\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\n        }\n\n        return tempAddress;\n    }\n\n    function toUint8(bytes memory _bytes, uint256 _start) internal pure returns (uint8) {\n        require(_bytes.length >= _start + 1 , \"toUint8_outOfBounds\");\n        uint8 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x1), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toUint16(bytes memory _bytes, uint256 _start) internal pure returns (uint16) {\n        require(_bytes.length >= _start + 2, \"toUint16_outOfBounds\");\n        uint16 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x2), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toUint32(bytes memory _bytes, uint256 _start) internal pure returns (uint32) {\n        require(_bytes.length >= _start + 4, \"toUint32_outOfBounds\");\n        uint32 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x4), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toUint64(bytes memory _bytes, uint256 _start) internal pure returns (uint64) {\n        require(_bytes.length >= _start + 8, \"toUint64_outOfBounds\");\n        uint64 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x8), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toUint96(bytes memory _bytes, uint256 _start) internal pure returns (uint96) {\n        require(_bytes.length >= _start + 12, \"toUint96_outOfBounds\");\n        uint96 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0xc), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toUint128(bytes memory _bytes, uint256 _start) internal pure returns (uint128) {\n        require(_bytes.length >= _start + 16, \"toUint128_outOfBounds\");\n        uint128 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x10), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toUint256(bytes memory _bytes, uint256 _start) internal pure returns (uint256) {\n        require(_bytes.length >= _start + 32, \"toUint256_outOfBounds\");\n        uint256 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x20), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toBytes32(bytes memory _bytes, uint256 _start) internal pure returns (bytes32) {\n        require(_bytes.length >= _start + 32, \"toBytes32_outOfBounds\");\n        bytes32 tempBytes32;\n\n        assembly {\n            tempBytes32 := mload(add(add(_bytes, 0x20), _start))\n        }\n\n        return tempBytes32;\n    }\n\n    function equal(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bool) {\n        bool success = true;\n\n        assembly {\n            let length := mload(_preBytes)\n\n        // if lengths don't match the arrays are not equal\n            switch eq(length, mload(_postBytes))\n            case 1 {\n            // cb is a circuit breaker in the for loop since there's\n            //  no said feature for inline assembly loops\n            // cb = 1 - don't breaker\n            // cb = 0 - break\n                let cb := 1\n\n                let mc := add(_preBytes, 0x20)\n                let end := add(mc, length)\n\n                for {\n                    let cc := add(_postBytes, 0x20)\n                // the next line is the loop condition:\n                // while(uint256(mc < end) + cb == 2)\n                } eq(add(lt(mc, end), cb), 2) {\n                    mc := add(mc, 0x20)\n                    cc := add(cc, 0x20)\n                } {\n                // if any of these checks fails then arrays are not equal\n                    if iszero(eq(mload(mc), mload(cc))) {\n                    // unsuccess:\n                        success := 0\n                        cb := 0\n                    }\n                }\n            }\n            default {\n            // unsuccess:\n                success := 0\n            }\n        }\n\n        return success;\n    }\n\n    function equalStorage(\n        bytes storage _preBytes,\n        bytes memory _postBytes\n    )\n    internal\n    view\n    returns (bool)\n    {\n        bool success = true;\n\n        assembly {\n        // we know _preBytes_offset is 0\n            let fslot := sload(_preBytes.slot)\n        // Decode the length of the stored array like in concatStorage().\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\n            let mlength := mload(_postBytes)\n\n        // if lengths don't match the arrays are not equal\n            switch eq(slength, mlength)\n            case 1 {\n            // slength can contain both the length and contents of the array\n            // if length < 32 bytes so let's prepare for that\n            // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\n                if iszero(iszero(slength)) {\n                    switch lt(slength, 32)\n                    case 1 {\n                    // blank the last byte which is the length\n                        fslot := mul(div(fslot, 0x100), 0x100)\n\n                        if iszero(eq(fslot, mload(add(_postBytes, 0x20)))) {\n                        // unsuccess:\n                            success := 0\n                        }\n                    }\n                    default {\n                    // cb is a circuit breaker in the for loop since there's\n                    //  no said feature for inline assembly loops\n                    // cb = 1 - don't breaker\n                    // cb = 0 - break\n                        let cb := 1\n\n                    // get the keccak hash to get the contents of the array\n                        mstore(0x0, _preBytes.slot)\n                        let sc := keccak256(0x0, 0x20)\n\n                        let mc := add(_postBytes, 0x20)\n                        let end := add(mc, mlength)\n\n                    // the next line is the loop condition:\n                    // while(uint256(mc < end) + cb == 2)\n                        for {} eq(add(lt(mc, end), cb), 2) {\n                            sc := add(sc, 1)\n                            mc := add(mc, 0x20)\n                        } {\n                            if iszero(eq(sload(sc), mload(mc))) {\n                            // unsuccess:\n                                success := 0\n                                cb := 0\n                            }\n                        }\n                    }\n                }\n            }\n            default {\n            // unsuccess:\n                success := 0\n            }\n        }\n\n        return success;\n    }\n}\n"
    },
    "contracts/utils/ExcessivelySafeCall.sol": {
      "content": "// SPDX-License-Identifier: MIT OR Apache-2.0\npragma solidity >=0.7.6;\n\nlibrary ExcessivelySafeCall {\n    uint256 constant LOW_28_MASK =\n    0x00000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\n\n    /// @notice Use when you _really_ really _really_ don't trust the called\n    /// contract. This prevents the called contract from causing reversion of\n    /// the caller in as many ways as we can.\n    /// @dev The main difference between this and a solidity low-level call is\n    /// that we limit the number of bytes that the callee can cause to be\n    /// copied to caller memory. This prevents stupid things like malicious\n    /// contracts returning 10,000,000 bytes causing a local OOG when copying\n    /// to memory.\n    /// @param _target The address to call\n    /// @param _gas The amount of gas to forward to the remote contract\n    /// @param _maxCopy The maximum number of bytes of returndata to copy\n    /// to memory.\n    /// @param _calldata The data to send to the remote contract\n    /// @return success and returndata, as `.call()`. Returndata is capped to\n    /// `_maxCopy` bytes.\n    function excessivelySafeCall(\n        address _target,\n        uint256 _gas,\n        uint16 _maxCopy,\n        bytes memory _calldata\n    ) internal returns (bool, bytes memory) {\n        // set up for assembly call\n        uint256 _toCopy;\n        bool _success;\n        bytes memory _returnData = new bytes(_maxCopy);\n        // dispatch message to recipient\n        // by assembly calling \"handle\" function\n        // we call via assembly to avoid memcopying a very large returndata\n        // returned by a malicious contract\n        assembly {\n            _success := call(\n            _gas, // gas\n            _target, // recipient\n            0, // ether value\n            add(_calldata, 0x20), // inloc\n            mload(_calldata), // inlen\n            0, // outloc\n            0 // outlen\n            )\n        // limit our copy to 256 bytes\n            _toCopy := returndatasize()\n            if gt(_toCopy, _maxCopy) {\n                _toCopy := _maxCopy\n            }\n        // Store the length of the copied bytes\n            mstore(_returnData, _toCopy)\n        // copy the bytes from returndata[0:_toCopy]\n            returndatacopy(add(_returnData, 0x20), 0, _toCopy)\n        }\n        return (_success, _returnData);\n    }\n\n    /// @notice Use when you _really_ really _really_ don't trust the called\n    /// contract. This prevents the called contract from causing reversion of\n    /// the caller in as many ways as we can.\n    /// @dev The main difference between this and a solidity low-level call is\n    /// that we limit the number of bytes that the callee can cause to be\n    /// copied to caller memory. This prevents stupid things like malicious\n    /// contracts returning 10,000,000 bytes causing a local OOG when copying\n    /// to memory.\n    /// @param _target The address to call\n    /// @param _gas The amount of gas to forward to the remote contract\n    /// @param _maxCopy The maximum number of bytes of returndata to copy\n    /// to memory.\n    /// @param _calldata The data to send to the remote contract\n    /// @return success and returndata, as `.call()`. Returndata is capped to\n    /// `_maxCopy` bytes.\n    function excessivelySafeStaticCall(\n        address _target,\n        uint256 _gas,\n        uint16 _maxCopy,\n        bytes memory _calldata\n    ) internal view returns (bool, bytes memory) {\n        // set up for assembly call\n        uint256 _toCopy;\n        bool _success;\n        bytes memory _returnData = new bytes(_maxCopy);\n        // dispatch message to recipient\n        // by assembly calling \"handle\" function\n        // we call via assembly to avoid memcopying a very large returndata\n        // returned by a malicious contract\n        assembly {\n            _success := staticcall(\n            _gas, // gas\n            _target, // recipient\n            add(_calldata, 0x20), // inloc\n            mload(_calldata), // inlen\n            0, // outloc\n            0 // outlen\n            )\n        // limit our copy to 256 bytes\n            _toCopy := returndatasize()\n            if gt(_toCopy, _maxCopy) {\n                _toCopy := _maxCopy\n            }\n        // Store the length of the copied bytes\n            mstore(_returnData, _toCopy)\n        // copy the bytes from returndata[0:_toCopy]\n            returndatacopy(add(_returnData, 0x20), 0, _toCopy)\n        }\n        return (_success, _returnData);\n    }\n\n    /**\n     * @notice Swaps function selectors in encoded contract calls\n     * @dev Allows reuse of encoded calldata for functions with identical\n     * argument types but different names. It simply swaps out the first 4 bytes\n     * for the new selector. This function modifies memory in place, and should\n     * only be used with caution.\n     * @param _newSelector The new 4-byte selector\n     * @param _buf The encoded contract args\n     */\n    function swapSelector(bytes4 _newSelector, bytes memory _buf)\n    internal\n    pure\n    {\n        require(_buf.length >= 4);\n        uint256 _mask = LOW_28_MASK;\n        assembly {\n        // load the first word of\n            let _word := mload(add(_buf, 0x20))\n        // mask out the top 4 bytes\n        // /x\n            _word := and(_word, _mask)\n            _word := or(_newSelector, _word)\n            mstore(add(_buf, 0x20), _word)\n        }\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}